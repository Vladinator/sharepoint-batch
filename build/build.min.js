!function(){"use strict";var t={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(t,e,r){Object.defineProperty(e,"__esModule",{value:!0}),e.RequestJson=e.Request=void 0;const n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),a=r(/*! ./utils */"./utils.ts");e.Request=t=>n.__awaiter(void 0,void 0,void 0,(function*(){return new Promise((e=>n.__awaiter(void 0,void 0,void 0,(function*(){let r;(0,a.safeCall)(t,"before",r);try{r=yield fetch(t.url,t),r&&r.ok?(0,a.safeCall)(t,"done",r):(0,a.safeCall)(t,"fail",r,null==r?void 0:r.status,null==r?void 0:r.statusText)}catch(n){(0,a.safeCall)(t,"fail",r,n)}(0,a.safeCall)(t,"finally",r),e(r)}))))}));e.RequestJson=t=>n.__awaiter(void 0,void 0,void 0,(function*(){const r=yield(0,e.Request)(t);if(r)try{return yield r.json()}catch(n){}}))},"./sharepoint.ts":
/*!***********************!*\
  !*** ./sharepoint.ts ***!
  \***********************/function(t,e,r){var n,a,o,s,i,l,c,u,f,d,h,p,y;Object.defineProperty(e,"__esModule",{value:!0}),e.SharePointBatch=e.Changeset=void 0;const _=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),v=r(/*! ./utils */"./utils.ts"),b=r(/*! ./request */"./request.ts"),g={method:"GET",url:""},P={method:"POST",url:"",headers:{}};class w{static Parse(t){if(!(0,v.isString)(t))return;try{return JSON.parse(t)}catch(i){}const e=w.Level,r=t.split(w.LineSeparator),n=[];let a=null,o=null,s=e.UNKNOWN;for(const l of r){if(w.BatchResponse1.test(l)){a&&(a.data=this.Parse(a.data),n.push(a),a=null),s=e.EOF;break}if(w.BatchResponse2.test(l))a&&(a.data=this.Parse(a.data),n.push(a)),a={headers:{},http:{status:0,statusText:""},ok:!1,data:null},o=a,s=e.HEADERS;else if(s===e.REQUEST_BODY)o&&(null==o.data&&(o.data=""),o.data+=l);else if(w.BatchResponse3.test(l)){if(s===e.REQUEST&&o){const t=l.match(w.BatchResponse3);o.http.status=t&&parseInt(t[1],10)||0,o.http.statusText=t&&t[2]||"",o.ok=2==(o.http.status/100|0),s=e.REQUEST_HEADERS}}else if(/^.+:\s*.+$/i.test(l)){if(s===e.HEADERS||s===e.REQUEST_HEADERS){const t=l.split(w.HeaderKVSeparator);if(t){const e=t.shift(),r=e&&e.trim();r&&o&&(o.headers[r]=t.join(w.HeaderKVSeparatorChar).trim())}}}else if(/^[\s\r\n]*$/i.test(l))switch(s){case e.HEADERS:s=e.REQUEST;break;case e.REQUEST:s=e.REQUEST_HEADERS;break;case e.REQUEST_HEADERS:s=e.REQUEST_BODY}}if(!n.length){const e=w.SafeParse(t);if(e&&e!==t)return e}return n}static SafeParse(t){if(!(0,v.isString)(t))return t;try{return JSON.parse(t)}catch(s){}let e,r;try{e=new DOMParser}catch(s){}if(!e)return t;try{r=e.parseFromString(t,"text/xml")}catch(s){}if(!r)return t;const n=r.querySelector("error");if(!n)return r;const a=n.querySelector("code"),o=n.querySelector("message");return`${a?a.innerHTML:0}: ${o?o.innerHTML:""}`}}w.Level={UNKNOWN:0,HEADERS:1,REQUEST:2,REQUEST_HEADERS:3,REQUEST_BODY:4,EOF:5},w.LineSeparator=/\r\n/,w.HeaderKVSeparator=/:/,w.HeaderKVSeparatorChar=":",w.BatchResponse1=/^--batchresponse_.+--$/i,w.BatchResponse2=/^--batchresponse_.+$/i,w.BatchResponse3=/^HTTP\/1\.1\s+(\d+)\s+(.+)$/i;class S{constructor(t){n.set(this,void 0),a.set(this,void 0),_.__classPrivateFieldSet(this,n,(0,v.extend)({},g,t),"f")}getOptions(){return _.__classPrivateFieldGet(this,n,"f")}getMethod(){return _.__classPrivateFieldGet(this,n,"f").method}getUrl(){return`${_.__classPrivateFieldGet(this,n,"f").url}${(0,v.toParams)(_.__classPrivateFieldGet(this,n,"f").params)}`}getHeaders(){const t=_.__classPrivateFieldGet(this,n,"f").headers,e=[];if((0,v.isObject)(t))for(const r in t)e.push({key:r,value:t[r]});return e}getPayload(){return _.__classPrivateFieldGet(this,n,"f").body}getResponsePayload(){return _.__classPrivateFieldGet(this,a,"f")}setResponsePayload(t){_.__classPrivateFieldSet(this,a,t,"f")}}e.Changeset=S,n=new WeakMap,a=new WeakMap;class m{constructor(t){o.add(this),s.set(this,void 0),i.set(this,void 0),_.__classPrivateFieldSet(this,s,(0,v.extend)({},g,t),"f"),_.__classPrivateFieldSet(this,i,[],"f")}getOptions(){return _.__classPrivateFieldGet(this,s,"f")}getChangesets(){return _.__classPrivateFieldGet(this,i,"f")}isChangesetsFull(){return _.__classPrivateFieldGet(this,i,"f").length>=m.NumMaxChangesets}addChangeset(t){if(t instanceof S){const e=t.getOptions();return"/"===e.url[0]&&(e.url=`${_.__classPrivateFieldGet(this,s,"f").url}${e.url}`),_.__classPrivateFieldGet(this,i,"f").push(t)-1}return-1}getPayload(t){const e=[];for(const r of _.__classPrivateFieldGet(this,i,"f")){const n=r.getMethod(),a="GET"===n?null:`changeset_${(0,v.createGUID)()}`;if(e.push(`--batch_${t}`),a?e.push(`Content-Type: multipart/mixed; boundary="${a}"`):e.push("Content-Type: application/http"),e.push("Content-Transfer-Encoding: binary"),e.push(""),"GET"===n){e.push(`${n} ${r.getUrl()} HTTP/1.1`),e.push("Accept: application/json;odata=verbose");for(const t of r.getHeaders())e.push(`${t.key}: ${t.value}`);e.push("")}else{e.push(`--${a}`),e.push("Content-Type: application/http"),e.push("Content-Transfer-Encoding: binary"),e.push(""),e.push(`${n} ${r.getUrl()} HTTP/1.1`),e.push("Accept: application/json;odata=verbose"),e.push("Content-Type: application/json;odata=verbose");for(const n of r.getHeaders())e.push(`${n.key}: ${n.value}`);e.push("");const t=r.getPayload();t&&(e.push(JSON.stringify(t)),e.push(""))}a&&e.push(`--${a}--`)}return e.join("\r\n")}send(t,e){return _.__awaiter(this,void 0,void 0,(function*(){const r=_.__classPrivateFieldGet(this,i,"f");r.forEach((t=>(0,v.safeCall)(t.getOptions(),"before",t)));const n=(...t)=>{r.forEach((e=>(0,v.safeCall)(e.getOptions(),"fail",e,...t))),r.forEach((t=>(0,v.safeCall)(t.getOptions(),"finally",t)))},a=()=>{r.forEach((t=>(0,v.safeCall)(t.getOptions(),"finally",t)))},s=_.__classPrivateFieldGet(this,o,"m",l).call(this,t,e),u=(0,v.extend)({},s);let f=!1,d=!1;s.done=()=>f=!0,s.fail=()=>d=!0;const h=yield(0,b.Request)(s);if(!h)return d&&(0,v.safeCall)(u,"fail",h),void n();const p=yield h.text();if(!p||!h.ok){const t=w.SafeParse(p);return d&&(0,v.safeCall)(u,"fail",h,t,h.status,h.statusText),void n(t,h.status,h.statusText)}const y=w.Parse(p);if(!(0,v.isArray)(y))return r.forEach((t=>_.__classPrivateFieldGet(this,o,"m",c).call(this,t,p))),f&&(0,v.safeCall)(u,"done",h,p),a(),p;const g=y;return r.forEach(((t,e)=>_.__classPrivateFieldGet(this,o,"m",c).call(this,t,g[e]))),f&&(0,v.safeCall)(u,"done",h,g),a(),g}))}}s=new WeakMap,i=new WeakMap,o=new WeakSet,l=function(t,e){const r=t.getOptions(),n=(0,v.extend)({},P,r,e),a=(0,v.createGUID)();return n.url=`${r.url}/_api/$batch`,n.headers&&(0,v.extend)(n.headers,{"Content-Type":`multipart/mixed; boundary="batch_${a}"`,"X-RequestDigest":r.digest}),n.body=`${this.getPayload(a)}\r\n--batch_${a}--`,n},c=function(t,e){t.setResponsePayload(e);const r=(0,v.isObject)(e)?e:null,n=2==(r?r.http.status/100|0:0);r&&(r.changeset=t);const a=t.getOptions();n?(0,v.safeCall)(a,"fail",t,e):(0,v.safeCall)(a,"done",t,e)},m.NumMaxChangesets=100;e.SharePointBatch=class{constructor(t){u.add(this),f.set(this,void 0),d.set(this,void 0),h.set(this,void 0),_.__classPrivateFieldSet(this,f,t,"f"),_.__classPrivateFieldSet(this,d,[],"f")}static GetSharePointOptions(){const t=window,e=t._spPageContextInfo,r=t.GetRequestDigest;if(!(0,v.isObject)(e)||"function"!=typeof r)return;let n,a=e.webAbsoluteUrl;try{n=r()}catch(o){}return(0,v.isString)(a)||(a=""),(0,v.isString)(n)||(n=""),{url:a,digest:n}}getOptions(){return _.__classPrivateFieldGet(this,f,"f")}addChangeset(t){let e=_.__classPrivateFieldGet(this,u,"m",y).call(this);return e.isChangesetsFull()&&(e=_.__classPrivateFieldGet(this,u,"m",p).call(this)),e.addChangeset(t)>-1}send(t){return _.__awaiter(this,void 0,void 0,(function*(){const e=(0,v.extend)({},t),r=(0,v.extend)({},e);let n=!1,a=!1,o=[];e.done=(...t)=>(n=!0,o=t),e.fail=(...t)=>(a=!0,o=t);const s=[];let i=0,l=0;for(const t of _.__classPrivateFieldGet(this,d,"f")){const r=yield t.send(this,e);if((0,v.isArray)(r)){const t=r;i+=t.length,s.push(...t)}else{let e=t.getChangesets().length;for(l+=e;e-- >0;)s.push(r)}}if(n&&!a&&!i&&l&&(n=!1,a=!0),n||a||(n=!0,o[0]=r),n)(0,v.safeCall)(r,"done",o[1],s);else if(a)return(0,v.safeCall)(r,"fail",o[1],o[2],o[3],o[4]),{error:!0,ok:!1,results:o[2]};return{success:!0,ok:!0,results:s}}))}},f=new WeakMap,d=new WeakMap,h=new WeakMap,u=new WeakSet,p=function(t){const e=(0,v.extend)({},g,_.__classPrivateFieldGet(this,f,"f"),t);return _.__classPrivateFieldSet(this,h,new m(e),"f"),_.__classPrivateFieldGet(this,d,"f").push(_.__classPrivateFieldGet(this,h,"f")),_.__classPrivateFieldGet(this,h,"f")},y=function(){return _.__classPrivateFieldGet(this,h,"f")?_.__classPrivateFieldGet(this,h,"f"):_.__classPrivateFieldGet(this,u,"m",p).call(this)}},"./utils.ts":
/*!******************!*\
  !*** ./utils.ts ***!
  \******************/function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.safeCall=e.createGUID=e.toParams=e.extend=e.isString=e.isObject=e.isArray=void 0;e.isArray=t=>Array.isArray(t);e.isObject=(t,r=!1)=>t&&"object"==typeof t&&(!r||!(0,e.isArray)(t));e.isString=t=>"string"==typeof t;e.extend=(t,...e)=>Object.assign(t,...e);e.toParams=t=>{if(null==t)return"";const r=(t,n)=>{if((0,e.isArray)(t))return t.map(((t,e)=>`${n||"a"}[${e}]=${r(t)}`)).join("&");if((0,e.isObject)(t)){const e=[];for(const n in t){if(!t.hasOwnProperty(n))continue;const a=t[n];Array.isArray(a)?e.push(r(t[n],n)):e.push(`${n}=${r(t[n])}`)}return e.join("&")}const a=`${t}`;try{return encodeURIComponent(a)}catch(o){}return a},n=r(t);return n.length?`?${n}`:""};e.createGUID=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}));e.safeCall=(t,e,...r)=>{const n=t[e];"function"==typeof n&&n.call(null,t,...r)}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(t,e,r){r.r(e),r.d(e,{__assign:function(){return o},__asyncDelegator:function(){return w},__asyncGenerator:function(){return P},__asyncValues:function(){return S},__await:function(){return g},__awaiter:function(){return u},__classPrivateFieldGet:function(){return j},__classPrivateFieldIn:function(){return C},__classPrivateFieldSet:function(){return T},__createBinding:function(){return d},__decorate:function(){return i},__exportStar:function(){return h},__extends:function(){return a},__generator:function(){return f},__importDefault:function(){return E},__importStar:function(){return O},__makeTemplateObject:function(){return m},__metadata:function(){return c},__param:function(){return l},__read:function(){return y},__rest:function(){return s},__spread:function(){return _},__spreadArray:function(){return b},__spreadArrays:function(){return v},__values:function(){return p}});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)};function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var a in e=arguments[r])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t},o.apply(this,arguments)};function s(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(t);a<n.length;a++)e.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(t,n[a])&&(r[n[a]]=t[n[a]])}return r}function i(t,e,r,n){var a,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var i=t.length-1;i>=0;i--)(a=t[i])&&(s=(o<3?a(s):o>3?a(e,r,s):a(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s}function l(t,e){return function(r,n){e(r,n,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function u(t,e,r,n){return new(r||(r=Promise))((function(a,o){function s(t){try{l(n.next(t))}catch(e){o(e)}}function i(t){try{l(n["throw"](t))}catch(e){o(e)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,i)}l((n=n.apply(t,e||[])).next())}))}function f(t,e){var r,n,a,o,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:i(0),"throw":i(1),"return":i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(a=2&o[0]?n["return"]:o[0]?n["throw"]||((a=n["return"])&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(a=s.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){s.label=o[1];break}if(6===o[0]&&s.label<a[1]){s.label=a[1],a=o;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(o);break}a[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(i){o=[6,i],n=0}finally{r=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}}var d=Object.create?function(t,e,r,n){n===undefined&&(n=r);var a=Object.getOwnPropertyDescriptor(e,r);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,a)}:function(t,e,r,n){n===undefined&&(n=r),t[n]=e[r]};function h(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||d(e,t,r)}function p(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,a,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(i){a={error:i}}finally{try{n&&!n.done&&(r=o["return"])&&r.call(o)}finally{if(a)throw a.error}}return s}function _(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function v(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),a=0;for(e=0;e<r;e++)for(var o=arguments[e],s=0,i=o.length;s<i;s++,a++)n[a]=o[s];return n}function b(t,e,r){if(r||2===arguments.length)for(var n,a=0,o=e.length;a<o;a++)!n&&a in e||(n||(n=Array.prototype.slice.call(e,0,a)),n[a]=e[a]);return t.concat(n||Array.prototype.slice.call(e))}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function P(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,a=r.apply(t,e||[]),o=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(t){a[t]&&(n[t]=function(e){return new Promise((function(r,n){o.push([t,e,r,n])>1||i(t,e)}))})}function i(t,e){try{(r=a[t](e)).value instanceof g?Promise.resolve(r.value.v).then(l,c):u(o[0][2],r)}catch(n){u(o[0][3],n)}var r}function l(t){i("next",t)}function c(t){i("throw",t)}function u(t,e){t(e),o.shift(),o.length&&i(o[0][0],o[0][1])}}function w(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,a){e[n]=t[n]?function(e){return(r=!r)?{value:g(t[n](e)),done:"return"===n}:a?a(e):e}:a}}function S(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=p(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,a){(function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)})(n,a,(e=t[r](e)).done,e.value)}))}}}function m(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var x=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t["default"]=e};function O(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&d(e,t,r);return x(e,t),e}function E(t){return t&&t.__esModule?t:{"default":t}}function j(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}function T(t,e,r,n,a){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!a:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?a.call(t,r):a?a.value=r:e.set(t,r),r}function C(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}}},e={};function r(n){var a=e[n];if(a!==undefined)return a.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};!function(){var t=n;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(t,"__esModule",{value:!0});const e=r(/*! ./sharepoint */"./sharepoint.ts");((t,r)=>{r.Changeset=e.Changeset,t.SharePointBatch=r})(window,e.SharePointBatch)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,