!function(){"use strict";var e={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.RequestText=t.RequestJson=t.RequestFormData=t.RequestBlob=t.RequestArrayBuffer=t.Request=void 0;var n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=function(e,t,r){for(var o=[],i=3;i<arguments.length;i++)o[i-3]=arguments[i];var u=e[t];"function"==typeof u&&u.call.apply(u,n.__spreadArray([null,e,r],n.__read(o),!1))};t.Request=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){return n.__generator(this,(function(t){return[2,new Promise((function(t){return n.__awaiter(void 0,void 0,void 0,(function(){var r,i;return n.__generator(this,(function(n){switch(n.label){case 0:o(e,"before",r),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(e.url,e)];case 2:return r=n.sent(),o(e,"done",r),[3,4];case 3:return i=n.sent(),o(e,"fail",r,i),[3,4];case 4:return o(e,"finally",r),t(r),[2]}}))}))}))]}))}))};t.RequestArrayBuffer=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){var r;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(r=n.sent()))return[2];n.label=2;case 2:return n.trys.push([2,4,,5]),[4,r.arrayBuffer()];case 3:return[2,n.sent()];case 4:return n.sent(),[3,5];case 5:return[2]}}))}))};t.RequestBlob=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){var r;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(r=n.sent()))return[2];n.label=2;case 2:return n.trys.push([2,4,,5]),[4,r.blob()];case 3:return[2,n.sent()];case 4:return n.sent(),[3,5];case 5:return[2]}}))}))};t.RequestFormData=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){var r;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(r=n.sent()))return[2];n.label=2;case 2:return n.trys.push([2,4,,5]),[4,r.formData()];case 3:return[2,n.sent()];case 4:return n.sent(),[3,5];case 5:return[2]}}))}))};t.RequestJson=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){var r;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(r=n.sent()))return[2];n.label=2;case 2:return n.trys.push([2,4,,5]),[4,r.json()];case 3:return[2,n.sent()];case 4:return n.sent(),[3,5];case 5:return[2]}}))}))};t.RequestText=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){var r;return n.__generator(this,(function(n){switch(n.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(r=n.sent()))return[2];n.label=2;case 2:return n.trys.push([2,4,,5]),[4,r.text()];case 3:return[2,n.sent()];case 4:return n.sent(),[3,5];case 5:return[2]}}))}))}},"./sharepoint.ts":
/*!***********************!*\
  !*** ./sharepoint.ts ***!
  \***********************/function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=r(/*! ./utils */"./utils.ts"),i=r(/*! ./request */"./request.ts"),u=function(){function e(e){this._options=e}return e.GetSharePointOptions=function(){var e=window._spPageContextInfo,t=window.GetRequestDigest;if((0,o.isObject)(e)&&"function"==typeof t)return{url:e.webAbsoluteUrl,digest:t()}},e.CreateGUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},e.prototype.GetRequestOptions=function(e){var t={method:"GET",url:"",headers:{Accept:"application/json;odata=verbose","Content-Type":"application/json;odata=verbose"}};return(0,o.isObject)(e)?((0,o.isObject)(e.headers)&&(0,o.extend)(t.headers,e.headers),(0,o.extend)(t,e)):(0,o.isString)(e)&&(t.url=e),t},e.prototype.QueryEndpoint=function(e){return n.__awaiter(this,void 0,void 0,(function(){var t,r;return n.__generator(this,(function(n){switch(n.label){case 0:return t=this.GetRequestOptions(e),[4,(0,i.RequestJson)(t)];case 1:return(r=n.sent())?[2,r.d]:[2]}}))}))},e.prototype.GetWeb=function(e){return n.__awaiter(this,void 0,void 0,(function(){return n.__generator(this,(function(t){switch(t.label){case 0:return[4,this.QueryEndpoint("/_api/Web".concat((0,o.toParams)(e)))];case 1:return[2,t.sent()]}}))}))},e}();t["default"]=u},"./utils.ts":
/*!******************!*\
  !*** ./utils.ts ***!
  \******************/function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.toParams=t.extend=t.isString=t.isObject=t.isArray=void 0;var n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js");t.isArray=function(e){return Array.isArray(e)};t.isObject=function(e,r){return void 0===r&&(r=!1),e&&"object"==typeof e&&(!r||!(0,t.isArray)(e))};t.isString=function(e){return"string"==typeof e};t.extend=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return Object.assign.apply(Object,n.__spreadArray([e],n.__read(t),!1))};t.toParams=function(e){if(null==e)return"";var r=function(e,n){if((0,t.isArray)(e))return e.map((function(e,t){return"".concat(n||"a","[").concat(t,"]=").concat(r(e))})).join("&");if((0,t.isObject)(e)){var o=[];for(var i in e)if(e.hasOwnProperty(i)){var u=e[i];Array.isArray(u)?o.push(r(e[i],i)):o.push("".concat(i,"=").concat(r(e[i])))}return o.join("&")}var a="".concat(e);try{return encodeURIComponent(a)}catch(c){}return a},n=r(e);return n.length?"".concat("?").concat(n):""}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(e,t,r){r.r(t),r.d(t,{__assign:function(){return i},__asyncDelegator:function(){return x},__asyncGenerator:function(){return m},__asyncValues:function(){return g},__await:function(){return w},__awaiter:function(){return f},__classPrivateFieldGet:function(){return R},__classPrivateFieldIn:function(){return T},__classPrivateFieldSet:function(){return q},__createBinding:function(){return p},__decorate:function(){return a},__exportStar:function(){return d},__extends:function(){return o},__generator:function(){return l},__importDefault:function(){return S},__importStar:function(){return P},__makeTemplateObject:function(){return O},__metadata:function(){return s},__param:function(){return c},__read:function(){return v},__rest:function(){return u},__spread:function(){return _},__spreadArray:function(){return h},__spreadArrays:function(){return b},__values:function(){return y}});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var i=function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function u(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}function a(e,t,r,n){var o,i=arguments.length,u=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(u=(i<3?o(u):i>3?o(t,r,u):o(t,r))||u);return i>3&&u&&Object.defineProperty(t,r,u),u}function c(e,t){return function(r,n){t(r,n,e)}}function s(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,r,n){return new(r||(r=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(t){i(t)}}function a(e){try{c(n["throw"](e))}catch(t){i(t)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))}function l(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),"throw":a(1),"return":a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n["return"]:i[0]?n["throw"]||((o=n["return"])&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(a){i=[6,a],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}var p=Object.create?function(e,t,r,n){n===undefined&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]};function d(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||p(t,e,r)}function y(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function v(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(a){o={error:a}}finally{try{n&&!n.done&&(r=i["return"])&&r.call(i)}finally{if(o)throw o.error}}return u}function _(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(v(arguments[t]));return e}function b(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],u=0,a=i.length;u<a;u++,o++)n[o]=i[u];return n}function h(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function m(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),i=[];return n={},u("next"),u("throw"),u("return"),n[Symbol.asyncIterator]=function(){return this},n;function u(e){o[e]&&(n[e]=function(t){return new Promise((function(r,n){i.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=o[e](t)).value instanceof w?Promise.resolve(r.value.v).then(c,s):f(i[0][2],r)}catch(n){f(i[0][3],n)}var r}function c(e){a("next",e)}function s(e){a("throw",e)}function f(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function x(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,o){t[n]=e[n]?function(t){return(r=!r)?{value:w(e[n](t)),done:"return"===n}:o?o(t):t}:o}}function g(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=y(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,o,(t=e[r](t)).done,t.value)}))}}}function O(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var j=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e["default"]=t};function P(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&p(t,e,r);return j(t,e),t}function S(e){return e&&e.__esModule?e:{"default":e}}function R(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)}function q(e,t,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(e,r):o?o.value=r:t.set(e,r),r}function T(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function r(n){var o=t[n];if(o!==undefined)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){var e=n;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(e,"__esModule",{value:!0});var t=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=r(/*! ./sharepoint */"./sharepoint.ts");t.__awaiter(void 0,void 0,void 0,(function(){var e,r,n,i;return t.__generator(this,(function(t){switch(t.label){case 0:return(e=o["default"].GetSharePointOptions())?(r=new o["default"](e),window.spb=r,i=(n=console).warn,[4,r.GetWeb({$expand:"Lists,Webs",$select:"Id,Title,Lists/Id,Lists/Title,Webs/Id,Webs/Title"})]):[2,console.error("This code can only run on a SharePoint site.")];case 1:return i.apply(n,[t.sent()]),[2]}}))}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,