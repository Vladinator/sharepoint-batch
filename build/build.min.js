!function(){"use strict";var t={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.RequestJson=e.Request=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=n(/*! ./utils */"./utils.ts");e.Request=function(t){return r.__awaiter(void 0,void 0,void 0,(function(){return r.__generator(this,(function(e){return[2,new Promise((function(e){return r.__awaiter(void 0,void 0,void 0,(function(){var n,a;return r.__generator(this,(function(r){switch(r.label){case 0:(0,o.safeCall)(t,"before",n),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,fetch(t.url,t)];case 2:return(n=r.sent())&&n.ok?(0,o.safeCall)(t,"done",n):(0,o.safeCall)(t,"fail",n,null==n?void 0:n.status,null==n?void 0:n.statusText),[3,4];case 3:return a=r.sent(),(0,o.safeCall)(t,"fail",n,a),[3,4];case 4:return(0,o.safeCall)(t,"finally",n),e(n),[2]}}))}))}))]}))}))};e.RequestJson=function(t){return r.__awaiter(void 0,void 0,void 0,(function(){var n;return r.__generator(this,(function(r){switch(r.label){case 0:return[4,(0,e.Request)(t)];case 1:if(!(n=r.sent()))return[2];r.label=2;case 2:return r.trys.push([2,4,,5]),[4,n.json()];case 3:return[2,r.sent()];case 4:return r.sent(),[3,5];case 5:return[2]}}))}))}},"./sharepoint.ts":
/*!***********************!*\
  !*** ./sharepoint.ts ***!
  \***********************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.SharePointBatch=e.BatchJob=e.Changeset=e.ResponseParser=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=n(/*! ./utils */"./utils.ts"),a=n(/*! ./request */"./request.ts"),i={method:"GET",url:""},u={method:"POST",url:"",headers:{}},s=function(){function t(){}return t.Parse=function(e){var n,a,i;if((0,o.isString)(e)){try{return JSON.parse(e)}catch(g){}var u=t.Level,s=e.split(t.LineSeparator),c=[],l=null,f=null,p=u.UNKNOWN;try{for(var h=r.__values(s),d=h.next();!d.done;d=h.next()){var y=d.value;if(t.BatchResponse1.test(y)){l&&(l.data=this.Parse(l.data),c.push(l),l=null),p=u.EOF;break}if(t.BatchResponse2.test(y))l&&(l.data=this.Parse(l.data),c.push(l)),f=l={headers:{},http:{status:0,statusText:""},data:null},p=u.HEADERS;else if(p===u.REQUEST_BODY)f&&(null==f.data&&(f.data=""),f.data+=y);else if(t.BatchResponse3.test(y)){if(p===u.REQUEST&&f){var _=y.match(t.BatchResponse3);f.http.status=_&&parseInt(_[1],10)||0,f.http.statusText=_&&_[2]||"",p=u.REQUEST_HEADERS}}else if(/^.+:\s*.+$/i.test(y)){if(p===u.HEADERS||p===u.REQUEST_HEADERS){var v=y.split(t.HeaderKVSeparator);if(v){var b=null===(i=v.shift())||void 0===i?void 0:i.trim();b&&f&&(f.headers[b]=v.join(t.HeaderKVSeparatorChar).trim())}}}else if(/^[\s\r\n]*$/i.test(y))switch(p){case u.HEADERS:p=u.REQUEST;break;case u.REQUEST:p=u.REQUEST_HEADERS;break;case u.REQUEST_HEADERS:p=u.REQUEST_BODY}}}catch(w){n={error:w}}finally{try{d&&!d.done&&(a=h["return"])&&a.call(h)}finally{if(n)throw n.error}}return c}},t.SafeParse=function(t){if(!(0,o.isString)(t))return t;try{return JSON.parse(t)}catch(c){}var e,n;try{e=new DOMParser}catch(c){}if(!e)return t;try{n=e.parseFromString(t,"text/xml")}catch(c){}if(!n)return t;var r=n.querySelector("error");if(!r)return n;var a=r.querySelector("code"),i=r.querySelector("message"),u=a?a.innerHTML:0,s=i?i.innerHTML:"";return"".concat(u,": ").concat(s)},t.Level={UNKNOWN:0,HEADERS:1,REQUEST:2,REQUEST_HEADERS:3,REQUEST_BODY:4,EOF:5},t.LineSeparator=/\r\n/,t.HeaderKVSeparator=/:/,t.HeaderKVSeparatorChar=":",t.BatchResponse1=/^--batchresponse_.+--$/i,t.BatchResponse2=/^--batchresponse_.+$/i,t.BatchResponse3=/^HTTP\/1\.1\s+(\d+)\s+(.+)$/i,t}();e.ResponseParser=s;var c=function(){function t(t){this._options=(0,o.extend)({},i,t)}return t.prototype.getMethod=function(){return this._options.method},t.prototype.getUrl=function(){return"".concat(this._options.url).concat((0,o.toParams)(this._options.params))},t.prototype.getHeaders=function(){var t=this._options.headers,e=[];if((0,o.isObject)(t))for(var n in t)e.push({key:n,value:t[n]});return e},t.prototype.getPayload=function(){return this._options.body},t.prototype.getResponsePayload=function(){return this._responsePayload},t.prototype.processResponsePayload=function(t){this._responsePayload=t;var e=(0,o.isObject)(t)?t:null,n=e?e.http.status/100|0:0;e&&(e.changeset=this),2!==n?(0,o.safeCall)(this._options,"fail",this,t):(0,o.safeCall)(this._options,"done",this,t)},t}();e.Changeset=c;var l=function(){function t(t){this._options=(0,o.extend)({},i,t),this._changesets=[]}return t.prototype.addChangeset=function(t){return t instanceof c?("/"===t._options.url[0]&&(t._options.url="".concat(this._options.url).concat(t._options.url)),this._changesets.push(t)-1):-1},t.prototype.getPayload=function(t){var e,n,a,i,u,s,c=[];try{for(var l=r.__values(this._changesets),f=l.next();!f.done;f=l.next()){var p=f.value,h=p.getMethod(),d="GET"===h?null:"changeset_".concat((0,o.createGUID)());if(c.push("--batch_".concat(t)),d?c.push('Content-Type: multipart/mixed; boundary="'.concat(d,'"')):c.push("Content-Type: application/http"),c.push("Content-Transfer-Encoding: binary"),c.push(""),"GET"===h){c.push("".concat(h," ").concat(p.getUrl()," HTTP/1.1")),c.push("Accept: application/json;odata=verbose");try{for(var y=(a=void 0,r.__values(p.getHeaders())),_=y.next();!_.done;_=y.next()){var v=_.value;c.push("".concat(v.key,": ").concat(v.value))}}catch(x){a={error:x}}finally{try{_&&!_.done&&(i=y["return"])&&i.call(y)}finally{if(a)throw a.error}}c.push("")}else{c.push("--".concat(d)),c.push("Content-Type: application/http"),c.push("Content-Transfer-Encoding: binary"),c.push(""),c.push("".concat(h," ").concat(p.getUrl()," HTTP/1.1")),c.push("Accept: application/json;odata=verbose"),c.push("Content-Type: application/json;odata=verbose");try{for(var b=(u=void 0,r.__values(p.getHeaders())),g=b.next();!g.done;g=b.next()){v=g.value;c.push("".concat(v.key,": ").concat(v.value))}}catch(S){u={error:S}}finally{try{g&&!g.done&&(s=b["return"])&&s.call(b)}finally{if(u)throw u.error}}c.push("");var w=p.getPayload();w&&(c.push(JSON.stringify(w)),c.push(""))}d&&c.push("--".concat(d,"--"))}}catch(m){e={error:m}}finally{try{f&&!f.done&&(n=l["return"])&&n.call(l)}finally{if(e)throw e.error}}return c.join("\r\n")},t}();e.BatchJob=l;var f=function(){function t(t){this._options=t,this._jobs=[]}return t.GetSharePointOptions=function(){var t=window,e=t._spPageContextInfo,n=t.GetRequestDigest;if((0,o.isObject)(e)&&"function"==typeof n){var r,a=e.webAbsoluteUrl;try{r=n()}catch(i){}return(0,o.isString)(a)||(a=""),(0,o.isString)(r)||(r=""),{url:a,digest:r}}},t.prototype.appendNewJob=function(t){var e=(0,o.extend)({},i,this._options,t);return this._job=new l(e),this._jobs.push(this._job),this._job},t.prototype.getActiveJob=function(){return this._job?this._job:this.appendNewJob()},t.prototype.addChangeset=function(t){return this.getActiveJob().addChangeset(t)>-1},t.prototype.getPayload=function(t){return this._jobs.map((function(e){return e.getPayload(t)})).join("\r\n")},t.prototype.getSendOptions=function(t){var e=(0,o.extend)({},u,this._options,t),n=(0,o.createGUID)();return e.url="".concat(this._options.url,"/_api/$batch"),e.headers&&(0,o.extend)(e.headers,{"Content-Type":'multipart/mixed; boundary="batch_'.concat(n,'"'),"X-RequestDigest":this._options.digest}),e.body="".concat(this.getPayload(n),"\r\n--batch_").concat(n,"--"),e},t.prototype.send=function(t){return r.__awaiter(this,void 0,void 0,(function(){var e,n,i,u,c,l,f,p,h,d,y,_;return r.__generator(this,(function(v){switch(v.label){case 0:return(e=this._jobs.reduce((function(t,e){return t.push.apply(t,r.__spreadArray([],r.__read(e._changesets),!1)),t}),[])).forEach((function(t){return(0,o.safeCall)(t._options,"before",t)})),n=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e.forEach((function(e){return o.safeCall.apply(void 0,r.__spreadArray([e._options,"fail",e],r.__read(t),!1))})),e.forEach((function(t){return(0,o.safeCall)(t._options,"finally",t)}))},i=function(){e.forEach((function(t){return(0,o.safeCall)(t._options,"finally",t)}))},u=this.getSendOptions(t),c=(0,o.extend)({},u),l=!1,f=!1,u.done=function(){return l=!0},u.fail=function(){return f=!0},[4,(0,a.Request)(u)];case 1:return(p=v.sent())?[4,p.text()]:(f&&(0,o.safeCall)(c,"fail",p),n(),[2]);case 2:return(h=v.sent())&&p.ok?(y=s.Parse(h),(0,o.isArray)(y)?(_=y,e.forEach((function(t,e){return t.processResponsePayload(_[e])})),l&&(0,o.safeCall)(c,"done",p,_),i(),[2,_]):(e.forEach((function(t){return t.processResponsePayload(h)})),l&&(0,o.safeCall)(c,"done",p,h),i(),[2,h])):(d=s.SafeParse(h),f&&(0,o.safeCall)(c,"fail",p,d,p.status,p.statusText),n(d,p.status,p.statusText),[2])}}))}))},t}();e.SharePointBatch=f},"./utils.ts":
/*!******************!*\
  !*** ./utils.ts ***!
  \******************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.safeCall=e.createGUID=e.toParams=e.extend=e.isString=e.isObject=e.isArray=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js");e.isArray=function(t){return Array.isArray(t)};e.isObject=function(t,n){return void 0===n&&(n=!1),t&&"object"==typeof t&&(!n||!(0,e.isArray)(t))};e.isString=function(t){return"string"==typeof t};e.extend=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return Object.assign.apply(Object,r.__spreadArray([t],r.__read(e),!1))};e.toParams=function(t){if(null==t)return"";var n=function(t,r){if((0,e.isArray)(t))return t.map((function(t,e){return"".concat(r||"a","[").concat(e,"]=").concat(n(t))})).join("&");if((0,e.isObject)(t)){var o=[];for(var a in t)if(t.hasOwnProperty(a)){var i=t[a];Array.isArray(i)?o.push(n(t[a],a)):o.push("".concat(a,"=").concat(n(t[a])))}return o.join("&")}var u="".concat(t);try{return encodeURIComponent(u)}catch(s){}return u},r=n(t);return r.length?"".concat("?").concat(r):""};e.createGUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))};e.safeCall=function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var a=t[e];"function"==typeof a&&a.call.apply(a,r.__spreadArray([null,t],r.__read(n),!1))}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(t,e,n){n.r(e),n.d(e,{__assign:function(){return a},__asyncDelegator:function(){return x},__asyncGenerator:function(){return w},__asyncValues:function(){return S},__await:function(){return g},__awaiter:function(){return l},__classPrivateFieldGet:function(){return O},__classPrivateFieldIn:function(){return R},__classPrivateFieldSet:function(){return T},__createBinding:function(){return p},__decorate:function(){return u},__exportStar:function(){return h},__extends:function(){return o},__generator:function(){return f},__importDefault:function(){return E},__importStar:function(){return j},__makeTemplateObject:function(){return m},__metadata:function(){return c},__param:function(){return s},__read:function(){return y},__rest:function(){return i},__spread:function(){return _},__spreadArray:function(){return b},__spreadArrays:function(){return v},__values:function(){return d}});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var a=function(){return a=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},a.apply(this,arguments)};function i(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}function u(t,e,n,r){var o,a=arguments.length,i=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(i=(a<3?o(i):a>3?o(e,n,i):o(e,n))||i);return a>3&&i&&Object.defineProperty(e,n,i),i}function s(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{s(r.next(t))}catch(e){a(e)}}function u(t){try{s(r["throw"](t))}catch(e){a(e)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,u)}s((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),"throw":u(1),"return":u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r["return"]:a[0]?r["throw"]||((o=r["return"])&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(u){a=[6,u],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}var p=Object.create?function(t,e,n,r){r===undefined&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){r===undefined&&(r=n),t[r]=e[n]};function h(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||p(e,t,n)}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=a["return"])&&n.call(a)}finally{if(o)throw o.error}}return i}function _(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function v(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r}function b(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function w(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){a.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=o[t](e)).value instanceof g?Promise.resolve(n.value.v).then(s,c):l(a[0][2],n)}catch(r){l(a[0][3],r)}var n}function s(t){u("next",t)}function c(t){u("throw",t)}function l(t,e){t(e),a.shift(),a.length&&u(a[0][0],a[0][1])}}function x(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,o){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:o?o(e):e}:o}}function S(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,o,(e=t[n](e)).done,e.value)}))}}}function m(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var P=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t["default"]=e};function j(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&p(e,t,n);return P(e,t),e}function E(t){return t&&t.__esModule?t:{"default":t}}function O(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}function T(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n}function R(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}}},e={};function n(r){var o=e[r];if(o!==undefined)return o.exports;var a=e[r]={exports:{}};return t[r](a,a.exports,n),a.exports}n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){var t=r;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(t,"__esModule",{value:!0});var e=n(/*! ./sharepoint */"./sharepoint.ts");!function(t,n){n.Changeset=e.Changeset,n.BatchJob=e.BatchJob,t.SharePointBatch=n}(window,e.SharePointBatch)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,