!function(){"use strict";var e={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.RequestJson=t.Request=void 0;const n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),a=r(/*! ./utils */"./utils.ts");t.Request=e=>n.__awaiter(void 0,void 0,void 0,(function*(){return new Promise((t=>n.__awaiter(void 0,void 0,void 0,(function*(){let r;(0,a.safeCall)(e,"before",r);try{r=yield fetch(e.url,e),r&&r.ok?(0,a.safeCall)(e,"done",r):(0,a.safeCall)(e,"fail",r,null==r?void 0:r.status,null==r?void 0:r.statusText)}catch(n){(0,a.safeCall)(e,"fail",r,n)}t(r),(0,a.safeCall)(e,"finally",r)}))))}));t.RequestJson=e=>n.__awaiter(void 0,void 0,void 0,(function*(){const r=yield(0,t.Request)(e);if(r)try{return yield r.json()}catch(n){}}))},"./sharepoint.ts":
/*!***********************!*\
  !*** ./sharepoint.ts ***!
  \***********************/function(e,t,r){var n,a,s,o,i,l,c,u,f,h,d,p,_;Object.defineProperty(t,"__esModule",{value:!0}),t.SharePointBatch=t.Changeset=void 0;const y=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),v=r(/*! ./utils */"./utils.ts"),b=r(/*! ./request */"./request.ts"),g={method:"GET",url:""},P={method:"POST",url:"",headers:{}};class w{static Parse(e){if(!(0,v.isString)(e))return;try{return JSON.parse(e)}catch(i){}const t=w.Level,r=e.split(w.LineSeparator),n=[];let a=null,s=null,o=t.UNKNOWN;for(const l of r){if(w.BatchResponse1.test(l)){a&&(a.data=this.Parse(a.data),n.push(a),a=null),o=t.EOF;break}if(w.BatchResponse2.test(l))a&&(a.data=this.Parse(a.data),n.push(a)),a={headers:{},http:{status:0,statusText:""},ok:!1,data:null},s=a,o=t.HEADERS;else if(o===t.REQUEST_BODY)s&&(null==s.data&&(s.data=""),s.data+=l);else if(w.BatchResponse3.test(l)){if(o===t.REQUEST&&s){const e=l.match(w.BatchResponse3);s.http.status=e&&parseInt(e[1],10)||0,s.http.statusText=e&&e[2]||"",s.ok=2==(s.http.status/100|0),o=t.REQUEST_HEADERS}}else if(/^.+:\s*.+$/i.test(l)){if(o===t.HEADERS||o===t.REQUEST_HEADERS){const e=l.split(w.HeaderKVSeparator);if(e){const t=e.shift(),r=t&&t.trim();r&&s&&(s.headers[r]=e.join(w.HeaderKVSeparatorChar).trim())}}}else if(/^[\s\r\n]*$/i.test(l))switch(o){case t.HEADERS:o=t.REQUEST;break;case t.REQUEST:o=t.REQUEST_HEADERS;break;case t.REQUEST_HEADERS:o=t.REQUEST_BODY}}if(!n.length){const t=w.SafeParse(e);if(t&&t!==e)return t}return n}static SafeParse(e){if(!(0,v.isString)(e))return e;try{return JSON.parse(e)}catch(o){}let t,r;try{t=new DOMParser}catch(o){}if(!t)return e;try{r=t.parseFromString(e,"text/xml")}catch(o){}if(!r)return e;const n=r.querySelector("error");if(!n)return r;const a=n.querySelector("code"),s=n.querySelector("message");return`${a?a.innerHTML:0}: ${s?s.innerHTML:""}`}}w.Level={UNKNOWN:0,HEADERS:1,REQUEST:2,REQUEST_HEADERS:3,REQUEST_BODY:4,EOF:5},w.LineSeparator=/\r\n/,w.HeaderKVSeparator=/:/,w.HeaderKVSeparatorChar=":",w.BatchResponse1=/^--batchresponse_.+--$/i,w.BatchResponse2=/^--batchresponse_.+$/i,w.BatchResponse3=/^HTTP\/1\.1\s+(\d+)\s+(.+)$/i;class S{constructor(e){n.set(this,void 0),a.set(this,void 0),y.__classPrivateFieldSet(this,n,(0,v.extend)({},g,e),"f")}getOptions(){return y.__classPrivateFieldGet(this,n,"f")}getMethod(){return y.__classPrivateFieldGet(this,n,"f").method}getUrl(){return`${y.__classPrivateFieldGet(this,n,"f").url}${(0,v.toParams)(y.__classPrivateFieldGet(this,n,"f").params)}`}getHeaders(){const e=y.__classPrivateFieldGet(this,n,"f").headers,t=[];if((0,v.isObject)(e))for(const r in e){const n=e[r];t.push({key:r,value:n})}return t}getPayload(){return y.__classPrivateFieldGet(this,n,"f").body}getResponsePayload(){return y.__classPrivateFieldGet(this,a,"f")}setResponsePayload(e){y.__classPrivateFieldSet(this,a,e,"f")}}t.Changeset=S,n=new WeakMap,a=new WeakMap;class m{constructor(e){s.add(this),o.set(this,void 0),i.set(this,void 0),y.__classPrivateFieldSet(this,o,(0,v.extend)({},g,e),"f"),y.__classPrivateFieldSet(this,i,[],"f")}getOptions(){return y.__classPrivateFieldGet(this,o,"f")}getChangesets(){return y.__classPrivateFieldGet(this,i,"f")}isChangesetsFull(){return y.__classPrivateFieldGet(this,i,"f").length>=m.NumMaxChangesets}addChangeset(e){if(e instanceof S){const t=e.getOptions();return"/"===t.url[0]&&(t.url=`${y.__classPrivateFieldGet(this,o,"f").url}${t.url}`),y.__classPrivateFieldGet(this,i,"f").push(e)-1}return-1}getPayload(e){const t=[];for(const r of y.__classPrivateFieldGet(this,i,"f")){const n=r.getMethod(),a="GET"===n?null:`changeset_${(0,v.createGUID)()}`;if(t.push(`--batch_${e}`),a?t.push(`Content-Type: multipart/mixed; boundary="${a}"`):t.push("Content-Type: application/http"),t.push("Content-Transfer-Encoding: binary"),t.push(""),"GET"===n){t.push(`${n} ${r.getUrl()} HTTP/1.1`),t.push("Accept: application/json;odata=verbose");for(const e of r.getHeaders())t.push(`${e.key}: ${e.value}`);t.push("")}else{t.push(`--${a}`),t.push("Content-Type: application/http"),t.push("Content-Transfer-Encoding: binary"),t.push(""),t.push(`${n} ${r.getUrl()} HTTP/1.1`),t.push("Accept: application/json;odata=verbose"),t.push("Content-Type: application/json;odata=verbose");for(const n of r.getHeaders())t.push(`${n.key}: ${n.value}`);t.push("");const e=r.getPayload();e&&(t.push(JSON.stringify(e)),t.push(""))}a&&t.push(`--${a}--`)}return t.join("\r\n")}send(e,t){return y.__awaiter(this,void 0,void 0,(function*(){const r=y.__classPrivateFieldGet(this,i,"f");r.forEach((e=>(0,v.safeCall)(e.getOptions(),"before",e)));const n=()=>{r.forEach((e=>(0,v.safeCall)(e.getOptions(),"fail",e))),r.forEach((e=>(0,v.safeCall)(e.getOptions(),"finally",e)))},a=()=>{r.forEach((e=>(0,v.safeCall)(e.getOptions(),"finally",e)))},o=y.__classPrivateFieldGet(this,s,"m",l).call(this,e,t),u=(0,v.extend)({},g,o);let f=!1,h=!1,d=[];o.before=()=>{},o.done=(...e)=>(f=!0,d=e),o.fail=(...e)=>(h=!0,d=e),o["finally"]=()=>{};const p=yield(0,b.Request)(o);if(d.shift(),!p)return h&&(0,v.safeCall)(u,"fail",p,d[3]||d[1],0,d[3]||d[1]),void n();const _=yield p.text();if(!_||!p.ok){const e=w.SafeParse(_);return h&&(0,v.safeCall)(u,"fail",p,e,p.status,p.statusText),void n()}const P=w.Parse(_);if(!(0,v.isArray)(P))return r.forEach((e=>y.__classPrivateFieldGet(this,s,"m",c).call(this,e,_))),f&&(0,v.safeCall)(u,"done",p,_),a(),_;const S=P;return r.forEach(((e,t)=>y.__classPrivateFieldGet(this,s,"m",c).call(this,e,S[t]))),f&&(0,v.safeCall)(u,"done",p,S),r.forEach((e=>(0,v.safeCall)(e.getOptions(),"done",e))),a(),S}))}}o=new WeakMap,i=new WeakMap,s=new WeakSet,l=function(e,t){const r=e.getOptions(),n=(0,v.extend)({},P,r,t),a=(0,v.createGUID)();return n.method="POST",n.url=`${r.url}/_api/$batch`,n.headers&&(0,v.extend)(n.headers,{"Content-Type":`multipart/mixed; boundary="batch_${a}"`,"X-RequestDigest":r.digest}),n.body=`${this.getPayload(a)}\r\n--batch_${a}--`,n},c=function(e,t){e.setResponsePayload(t);const r=(0,v.isObject)(t)?t:null,n=2==(r?r.http.status/100|0:0);r&&(r.changeset=e);const a=e.getOptions();n?(0,v.safeCall)(a,"fail",e,t):(0,v.safeCall)(a,"done",e,t)},m.NumMaxChangesets=100;t.SharePointBatch=class{constructor(e){u.add(this),f.set(this,void 0),h.set(this,void 0),d.set(this,void 0),y.__classPrivateFieldSet(this,f,e,"f"),y.__classPrivateFieldSet(this,h,[],"f")}static GetSharePointOptions(){const e=window,t=e._spPageContextInfo,r=e.GetRequestDigest;if(!(0,v.isObject)(t)||"function"!=typeof r)return;let n,a=t.webAbsoluteUrl;try{n=r()}catch(s){}return(0,v.isString)(a)||(a=""),(0,v.isString)(n)||(n=""),{url:a,digest:n}}getOptions(){return y.__classPrivateFieldGet(this,f,"f")}add(e){let t=y.__classPrivateFieldGet(this,u,"m",_).call(this);t.isChangesetsFull()&&(t=y.__classPrivateFieldGet(this,u,"m",p).call(this));for(const r of y.__classPrivateFieldGet(this,h,"f"))if(r.getChangesets().indexOf(e)>-1)return!1;return t.addChangeset(e)>-1}remove(e){for(const t of y.__classPrivateFieldGet(this,h,"f")){const r=t.getChangesets(),n=r.indexOf(e);if(-1!==n)return r.splice(n,1),!0}return!1}clear(){for(y.__classPrivateFieldGet(this,h,"f").forEach((e=>{const t=e.getChangesets();t.splice(0,t.length)}));y.__classPrivateFieldGet(this,h,"f").length>1;)y.__classPrivateFieldGet(this,h,"f").pop();y.__classPrivateFieldSet(this,d,y.__classPrivateFieldGet(this,h,"f")[0],"f")}getChangesets(){return y.__classPrivateFieldGet(this,h,"f").reduce(((e,t)=>(e.push(...t.getChangesets()),e)),[])}send(e){return y.__awaiter(this,void 0,void 0,(function*(){const t=(0,v.extend)({},g,e),r=(0,v.extend)({},g,t);let n=!1,a=!1,s=[];t.before=()=>{},t.done=(...e)=>(n=!0,s=e),t.fail=(...e)=>(a=!0,s=e),t["finally"]=()=>{};const o=[];let i=0,l=0;for(const e of y.__classPrivateFieldGet(this,h,"f")){const r=yield e.send(this,t);if((0,v.isArray)(r)){const e=r;i+=e.length,o.push(...e)}else{let t=e.getChangesets().length;for(l+=t;t-- >0;)o.push(r)}}return n&&!a&&!i&&l&&(n=!1,a=!0),n||a||(n=!0,s[1]=r),s.shift(),n?(s[1]=o,(0,v.safeCall)(r,"done",...s),(0,v.safeCall)(r,"finally",...s),{success:!0,ok:!0,results:o}):((0,v.safeCall)(r,"fail",...s),(0,v.safeCall)(r,"finally",...s),{error:!0,ok:!1,results:s[1]})}))}},f=new WeakMap,h=new WeakMap,d=new WeakMap,u=new WeakSet,p=function(e){const t=(0,v.extend)({},g,y.__classPrivateFieldGet(this,f,"f"),e);return y.__classPrivateFieldSet(this,d,new m(t),"f"),y.__classPrivateFieldGet(this,h,"f").push(y.__classPrivateFieldGet(this,d,"f")),y.__classPrivateFieldGet(this,d,"f")},_=function(){return y.__classPrivateFieldGet(this,d,"f")?y.__classPrivateFieldGet(this,d,"f"):y.__classPrivateFieldGet(this,u,"m",p).call(this)}},"./utils.ts":
/*!******************!*\
  !*** ./utils.ts ***!
  \******************/function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.safeCall=t.createGUID=t.toParams=t.extend=t.isString=t.isObject=t.isArray=void 0;t.isArray=e=>Array.isArray(e);t.isObject=(e,r=!1)=>!(!e||"object"!=typeof e||r&&(0,t.isArray)(e));t.isString=e=>"string"==typeof e;t.extend=(e,...t)=>Object.assign(e,...t);t.toParams=e=>{if(null==e)return"";const r=(e,n)=>{if((0,t.isArray)(e))return e.map(((e,t)=>`${n||"a"}[${t}]=${r(e)}`)).join("&");if((0,t.isObject)(e)){const t=[];for(const n in e){if(!e.hasOwnProperty(n))continue;const a=e[n];Array.isArray(a)?t.push(r(a,n)):t.push(`${n}=${r(a)}`)}return t.join("&")}const a=`${e}`;try{return encodeURIComponent(a)}catch(s){}return a},n=r(e);return n.length?`?${n}`:""};t.createGUID=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}));t.safeCall=(e,t,...r)=>{const n=e[t];"function"==typeof n&&n.call(null,e,...r)}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(e,t,r){r.r(t),r.d(t,{__assign:function(){return s},__asyncDelegator:function(){return w},__asyncGenerator:function(){return P},__asyncValues:function(){return S},__await:function(){return g},__awaiter:function(){return u},__classPrivateFieldGet:function(){return j},__classPrivateFieldIn:function(){return F},__classPrivateFieldSet:function(){return C},__createBinding:function(){return h},__decorate:function(){return i},__exportStar:function(){return d},__extends:function(){return a},__generator:function(){return f},__importDefault:function(){return E},__importStar:function(){return x},__makeTemplateObject:function(){return m},__metadata:function(){return c},__param:function(){return l},__read:function(){return _},__rest:function(){return o},__spread:function(){return y},__spreadArray:function(){return b},__spreadArrays:function(){return v},__values:function(){return p}});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var s=function(){return s=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},s.apply(this,arguments)};function o(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(r[n[a]]=e[n[a]])}return r}function i(e,t,r,n){var a,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var i=e.length-1;i>=0;i--)(a=e[i])&&(o=(s<3?a(o):s>3?a(t,r,o):a(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}function l(e,t){return function(r,n){t(r,n,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function u(e,t,r,n){return new(r||(r=Promise))((function(a,s){function o(e){try{l(n.next(e))}catch(t){s(t)}}function i(e){try{l(n["throw"](e))}catch(t){s(t)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}l((n=n.apply(e,t||[])).next())}))}function f(e,t){var r,n,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),"throw":i(1),"return":i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&s[0]?n["return"]:s[0]?n["throw"]||((a=n["return"])&&a.call(n),0):n.next)&&!(a=a.call(n,s[1])).done)return a;switch(n=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(i){s=[6,i],n=0}finally{r=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}var h=Object.create?function(e,t,r,n){n===undefined&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]};function d(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||h(t,e,r)}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,s=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)o.push(n.value)}catch(i){a={error:i}}finally{try{n&&!n.done&&(r=s["return"])&&r.call(s)}finally{if(a)throw a.error}}return o}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(_(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<r;t++)for(var s=arguments[t],o=0,i=s.length;o<i;o++,a++)n[a]=s[o];return n}function b(e,t,r){if(r||2===arguments.length)for(var n,a=0,s=t.length;a<s;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function P(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,a=r.apply(e,t||[]),s=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){a[e]&&(n[e]=function(t){return new Promise((function(r,n){s.push([e,t,r,n])>1||i(e,t)}))})}function i(e,t){try{(r=a[e](t)).value instanceof g?Promise.resolve(r.value.v).then(l,c):u(s[0][2],r)}catch(n){u(s[0][3],n)}var r}function l(e){i("next",e)}function c(e){i("throw",e)}function u(e,t){e(t),s.shift(),s.length&&i(s[0][0],s[0][1])}}function w(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,a){t[n]=e[n]?function(t){return(r=!r)?{value:g(e[n](t)),done:"return"===n}:a?a(t):t}:a}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=p(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,a){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,a,(t=e[r](t)).done,t.value)}))}}}function m(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var O=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e["default"]=t};function x(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&h(t,e,r);return O(t,e),t}function E(e){return e&&e.__esModule?e:{"default":e}}function j(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)}function C(e,t,r,n,a){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?a.call(e,r):a?a.value=r:t.set(e,r),r}function F(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function r(n){var a=t[n];if(a!==undefined)return a.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){var e=n;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(e,"__esModule",{value:!0});const t=r(/*! ./sharepoint */"./sharepoint.ts");((e,r)=>{r.Changeset=t.Changeset,e.SharePointBatch=r})(window,t.SharePointBatch)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,