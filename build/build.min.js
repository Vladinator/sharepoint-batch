!function(){"use strict";var e={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.RequestResolve=t.Request=void 0;var n=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=function(e,t,r){for(var o=[],u=3;u<arguments.length;u++)o[u-3]=arguments[u];var a=e[t];"function"==typeof a&&a.call.apply(a,n.__spreadArray([null,e,r],n.__read(o),!1))};t.Request=function(e){return n.__awaiter(void 0,void 0,void 0,(function(){return n.__generator(this,(function(t){return[2,new Promise((function(t){return n.__awaiter(void 0,void 0,void 0,(function(){var r,u;return n.__generator(this,(function(n){switch(n.label){case 0:o(e,"before",r),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(e.url,e)];case 2:return r=n.sent(),o(e,"done",r),[3,4];case 3:return u=n.sent(),o(e,"fail",r,u),[3,4];case 4:return o(e,"finally",r),t(r),[2]}}))}))}))]}))}))};var u=[{type:ArrayBuffer,prop:"arrayBuffer"},{type:Blob,prop:"blob"},{type:FormData,prop:"formData"},{type:Object,prop:"json"},{type:String,prop:"text"}];t.RequestResolve=function(e,r){return n.__awaiter(void 0,void 0,void 0,(function(){var o,a,i,c,f,l,s;return n.__generator(this,(function(p){switch(p.label){case 0:return[4,(0,t.Request)(e)];case 1:if(!(o=p.sent()))return[2];if(!r||r instanceof Response)return[2,o];p.label=2;case 2:p.trys.push([2,9,10,11]),a=n.__values(u),i=a.next(),p.label=3;case 3:if(i.done)return[3,8];if(c=i.value,!(r instanceof c.type))return[3,7];p.label=4;case 4:return p.trys.push([4,6,,7]),[4,o[c.prop]()];case 5:return[2,p.sent()];case 6:return p.sent(),[2];case 7:return i=a.next(),[3,3];case 8:return[3,11];case 9:return f=p.sent(),l={error:f},[3,11];case 10:try{i&&!i.done&&(s=a["return"])&&s.call(a)}finally{if(l)throw l.error}return[7];case 11:return[2]}}))}))}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(e,t,r){r.r(t),r.d(t,{__assign:function(){return u},__asyncDelegator:function(){return g},__asyncGenerator:function(){return m},__asyncValues:function(){return O},__await:function(){return w},__awaiter:function(){return l},__classPrivateFieldGet:function(){return R},__classPrivateFieldIn:function(){return E},__classPrivateFieldSet:function(){return T},__createBinding:function(){return p},__decorate:function(){return i},__exportStar:function(){return y},__extends:function(){return o},__generator:function(){return s},__importDefault:function(){return x},__importStar:function(){return S},__makeTemplateObject:function(){return j},__metadata:function(){return f},__param:function(){return c},__read:function(){return v},__rest:function(){return a},__spread:function(){return b},__spreadArray:function(){return h},__spreadArrays:function(){return _},__values:function(){return d}});var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var u=function(){return u=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},u.apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r}function i(e,t,r,n){var o,u=arguments.length,a=u<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var i=e.length-1;i>=0;i--)(o=e[i])&&(a=(u<3?o(a):u>3?o(t,r,a):o(t,r))||a);return u>3&&a&&Object.defineProperty(t,r,a),a}function c(e,t){return function(r,n){t(r,n,e)}}function f(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,r,n){return new(r||(r=Promise))((function(o,u){function a(e){try{c(n.next(e))}catch(t){u(t)}}function i(e){try{c(n["throw"](e))}catch(t){u(t)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,i)}c((n=n.apply(e,t||[])).next())}))}function s(e,t){var r,n,o,u,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:i(0),"throw":i(1),"return":i(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function i(u){return function(i){return function(u){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&u[0]?n["return"]:u[0]?n["throw"]||((o=n["return"])&&o.call(n),0):n.next)&&!(o=o.call(n,u[1])).done)return o;switch(n=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,n=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=t.call(e,a)}catch(i){u=[6,i],n=0}finally{r=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,i])}}}var p=Object.create?function(e,t,r,n){n===undefined&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]};function y(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||p(t,e,r)}function d(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function v(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,u=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=u.next()).done;)a.push(n.value)}catch(i){o={error:i}}finally{try{n&&!n.done&&(r=u["return"])&&r.call(u)}finally{if(o)throw o.error}}return a}function b(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(v(arguments[t]));return e}function _(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var u=arguments[t],a=0,i=u.length;a<i;a++,o++)n[o]=u[a];return n}function h(e,t,r){if(r||2===arguments.length)for(var n,o=0,u=t.length;o<u;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}function w(e){return this instanceof w?(this.v=e,this):new w(e)}function m(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),u=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){o[e]&&(n[e]=function(t){return new Promise((function(r,n){u.push([e,t,r,n])>1||i(e,t)}))})}function i(e,t){try{(r=o[e](t)).value instanceof w?Promise.resolve(r.value.v).then(c,f):l(u[0][2],r)}catch(n){l(u[0][3],n)}var r}function c(e){i("next",e)}function f(e){i("throw",e)}function l(e,t){e(t),u.shift(),u.length&&i(u[0][0],u[0][1])}}function g(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,o){t[n]=e[n]?function(t){return(r=!r)?{value:w(e[n](t)),done:"return"===n}:o?o(t):t}:o}}function O(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=d(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){(function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)})(n,o,(t=e[r](t)).done,t.value)}))}}}function j(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var P=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e["default"]=t};function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&p(t,e,r);return P(t,e),t}function x(e){return e&&e.__esModule?e:{"default":e}}function R(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)}function T(e,t,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(e,r):o?o.value=r:t.set(e,r),r}function E(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}}},t={};function r(n){var o=t[n];if(o!==undefined)return o.exports;var u=t[n]={exports:{}};return e[n](u,u.exports,r),u.exports}r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){var e=n;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(e,"__esModule",{value:!0});var t=r(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=r(/*! ./request */"./request.ts");t.__awaiter(void 0,void 0,void 0,(function(){var e,r,n,u,a;return t.__generator(this,(function(t){switch(t.label){case 0:return e={method:"GET",url:window.location.href},[4,(0,o.RequestResolve)(e)];case 1:return n=[t.sent()],[4,(0,o.RequestResolve)(e)];case 2:case 3:case 4:case 5:return n=n.concat([t.sent()]),[4,(0,o.RequestResolve)(e)];case 6:for(r=n.concat([t.sent()]),u=0;u<r.length;u++)a=r[u],console.warn(typeof a,a);return[2]}}))}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,