!function(){"use strict";var t={"./request.ts":
/*!********************!*\
  !*** ./request.ts ***!
  \********************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.RequestJson=e.Request=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=n(/*! ./utils */"./utils.ts");e.Request=function(t){return r.__awaiter(void 0,void 0,void 0,(function(){return r.__generator(this,(function(e){return[2,new Promise((function(e){return r.__awaiter(void 0,void 0,void 0,(function(){var n,a;return r.__generator(this,(function(r){switch(r.label){case 0:(0,o.safeCall)(t,"before",n),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,fetch(t.url,t)];case 2:return(n=r.sent())&&n.ok?(0,o.safeCall)(t,"done",n):(0,o.safeCall)(t,"fail",n,null==n?void 0:n.status,null==n?void 0:n.statusText),[3,4];case 3:return a=r.sent(),(0,o.safeCall)(t,"fail",n,a),[3,4];case 4:return(0,o.safeCall)(t,"finally",n),e(n),[2]}}))}))}))]}))}))};e.RequestJson=function(t){return r.__awaiter(void 0,void 0,void 0,(function(){var n;return r.__generator(this,(function(r){switch(r.label){case 0:return[4,(0,e.Request)(t)];case 1:if(!(n=r.sent()))return[2];r.label=2;case 2:return r.trys.push([2,4,,5]),[4,n.json()];case 3:return[2,r.sent()];case 4:return r.sent(),[3,5];case 5:return[2]}}))}))}},"./sharepoint.ts":
/*!***********************!*\
  !*** ./sharepoint.ts ***!
  \***********************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.SharePointBatch=e.Changeset=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js"),o=n(/*! ./utils */"./utils.ts"),a=n(/*! ./request */"./request.ts"),i={method:"GET",url:""},u={method:"POST",url:"",headers:{}},s=function(){function t(){}return t.Parse=function(e){var n,a,i;if((0,o.isString)(e)){try{return JSON.parse(e)}catch(g){}var u=t.Level,s=e.split(t.LineSeparator),c=[],l=null,f=null,p=u.UNKNOWN;try{for(var h=r.__values(s),d=h.next();!d.done;d=h.next()){var y=d.value;if(t.BatchResponse1.test(y)){l&&(l.data=this.Parse(l.data),c.push(l),l=null),p=u.EOF;break}if(t.BatchResponse2.test(y))l&&(l.data=this.Parse(l.data),c.push(l)),f=l={headers:{},http:{status:0,statusText:""},data:null},p=u.HEADERS;else if(p===u.REQUEST_BODY)f&&(null==f.data&&(f.data=""),f.data+=y);else if(t.BatchResponse3.test(y)){if(p===u.REQUEST&&f){var _=y.match(t.BatchResponse3);f.http.status=_&&parseInt(_[1],10)||0,f.http.statusText=_&&_[2]||"",p=u.REQUEST_HEADERS}}else if(/^.+:\s*.+$/i.test(y)){if(p===u.HEADERS||p===u.REQUEST_HEADERS){var v=y.split(t.HeaderKVSeparator);if(v){var b=null===(i=v.shift())||void 0===i?void 0:i.trim();b&&f&&(f.headers[b]=v.join(t.HeaderKVSeparatorChar).trim())}}}else if(/^[\s\r\n]*$/i.test(y))switch(p){case u.HEADERS:p=u.REQUEST;break;case u.REQUEST:p=u.REQUEST_HEADERS;break;case u.REQUEST_HEADERS:p=u.REQUEST_BODY}}}catch(w){n={error:w}}finally{try{d&&!d.done&&(a=h["return"])&&a.call(h)}finally{if(n)throw n.error}}return c}},t.SafeParse=function(t){if(!(0,o.isString)(t))return t;try{return JSON.parse(t)}catch(c){}var e,n;try{e=new DOMParser}catch(c){}if(!e)return t;try{n=e.parseFromString(t,"text/xml")}catch(c){}if(!n)return t;var r=n.querySelector("error");if(!r)return n;var a=r.querySelector("code"),i=r.querySelector("message"),u=a?a.innerHTML:0,s=i?i.innerHTML:"";return"".concat(u,": ").concat(s)},t.Level={UNKNOWN:0,HEADERS:1,REQUEST:2,REQUEST_HEADERS:3,REQUEST_BODY:4,EOF:5},t.LineSeparator=/\r\n/,t.HeaderKVSeparator=/:/,t.HeaderKVSeparatorChar=":",t.BatchResponse1=/^--batchresponse_.+--$/i,t.BatchResponse2=/^--batchresponse_.+$/i,t.BatchResponse3=/^HTTP\/1\.1\s+(\d+)\s+(.+)$/i,t}(),c=function(){function t(t){this._options=(0,o.extend)({},i,t)}return t.prototype.getMethod=function(){return this._options.method},t.prototype.getUrl=function(){return"".concat(this._options.url).concat((0,o.toParams)(this._options.params))},t.prototype.getHeaders=function(){var t=this._options.headers,e=[];if((0,o.isObject)(t))for(var n in t)e.push({key:n,value:t[n]});return e},t.prototype.getPayload=function(){return this._options.body},t.prototype.getResponsePayload=function(){return this._responsePayload},t.prototype.processResponsePayload=function(t){this._responsePayload=t;var e=(0,o.isObject)(t)?t:null,n=e?e.http.status/100|0:0;e&&(e.changeset=this),2!==n?(0,o.safeCall)(this._options,"fail",this,t):(0,o.safeCall)(this._options,"done",this,t)},t}();e.Changeset=c;var l=function(){function t(t){this._options=(0,o.extend)({},i,t),this._changesets=[]}return t.prototype.isChangesetsFull=function(){return this._changesets.length>=t.NumMaxChangesets},t.prototype.addChangeset=function(t){return t instanceof c?("/"===t._options.url[0]&&(t._options.url="".concat(this._options.url).concat(t._options.url)),this._changesets.push(t)-1):-1},t.prototype.getPayload=function(t){var e,n,a,i,u,s,c=[];try{for(var l=r.__values(this._changesets),f=l.next();!f.done;f=l.next()){var p=f.value,h=p.getMethod(),d="GET"===h?null:"changeset_".concat((0,o.createGUID)());if(c.push("--batch_".concat(t)),d?c.push('Content-Type: multipart/mixed; boundary="'.concat(d,'"')):c.push("Content-Type: application/http"),c.push("Content-Transfer-Encoding: binary"),c.push(""),"GET"===h){c.push("".concat(h," ").concat(p.getUrl()," HTTP/1.1")),c.push("Accept: application/json;odata=verbose");try{for(var y=(a=void 0,r.__values(p.getHeaders())),_=y.next();!_.done;_=y.next()){var v=_.value;c.push("".concat(v.key,": ").concat(v.value))}}catch(x){a={error:x}}finally{try{_&&!_.done&&(i=y["return"])&&i.call(y)}finally{if(a)throw a.error}}c.push("")}else{c.push("--".concat(d)),c.push("Content-Type: application/http"),c.push("Content-Transfer-Encoding: binary"),c.push(""),c.push("".concat(h," ").concat(p.getUrl()," HTTP/1.1")),c.push("Accept: application/json;odata=verbose"),c.push("Content-Type: application/json;odata=verbose");try{for(var b=(u=void 0,r.__values(p.getHeaders())),g=b.next();!g.done;g=b.next()){v=g.value;c.push("".concat(v.key,": ").concat(v.value))}}catch(S){u={error:S}}finally{try{g&&!g.done&&(s=b["return"])&&s.call(b)}finally{if(u)throw u.error}}c.push("");var w=p.getPayload();w&&(c.push(JSON.stringify(w)),c.push(""))}d&&c.push("--".concat(d,"--"))}}catch(m){e={error:m}}finally{try{f&&!f.done&&(n=l["return"])&&n.call(l)}finally{if(e)throw e.error}}return c.join("\r\n")},t.NumMaxChangesets=100,t}(),f=function(){function t(t){this._options=t,this._jobs=[]}return t.GetSharePointOptions=function(){var t=window,e=t._spPageContextInfo,n=t.GetRequestDigest;if((0,o.isObject)(e)&&"function"==typeof n){var r,a=e.webAbsoluteUrl;try{r=n()}catch(i){}return(0,o.isString)(a)||(a=""),(0,o.isString)(r)||(r=""),{url:a,digest:r}}},t.prototype.appendNewJob=function(t){var e=(0,o.extend)({},i,this._options,t);return this._job=new l(e),this._jobs.push(this._job),this._job},t.prototype.getActiveJob=function(){return this._job?this._job:this.appendNewJob()},t.prototype.addChangeset=function(t){var e=this.getActiveJob();return e.isChangesetsFull()&&(e=this.appendNewJob()),e.addChangeset(t)>-1},t.prototype.getPayload=function(t){return this._jobs.map((function(e){return e.getPayload(t)})).join("\r\n")},t.prototype.getSendOptions=function(t){var e=(0,o.extend)({},u,this._options,t),n=(0,o.createGUID)();return e.url="".concat(this._options.url,"/_api/$batch"),e.headers&&(0,o.extend)(e.headers,{"Content-Type":'multipart/mixed; boundary="batch_'.concat(n,'"'),"X-RequestDigest":this._options.digest}),e.body="".concat(this.getPayload(n),"\r\n--batch_").concat(n,"--"),e},t.prototype.send=function(t){return r.__awaiter(this,void 0,void 0,(function(){var e,n,i,u,c,l,f,p,h,d,y,_;return r.__generator(this,(function(v){switch(v.label){case 0:return(e=this._jobs.reduce((function(t,e){return t.push.apply(t,r.__spreadArray([],r.__read(e._changesets),!1)),t}),[])).forEach((function(t){return(0,o.safeCall)(t._options,"before",t)})),n=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];e.forEach((function(e){return o.safeCall.apply(void 0,r.__spreadArray([e._options,"fail",e],r.__read(t),!1))})),e.forEach((function(t){return(0,o.safeCall)(t._options,"finally",t)}))},i=function(){e.forEach((function(t){return(0,o.safeCall)(t._options,"finally",t)}))},u=this.getSendOptions(t),c=(0,o.extend)({},u),l=!1,f=!1,u.done=function(){return l=!0},u.fail=function(){return f=!0},[4,(0,a.Request)(u)];case 1:return(p=v.sent())?[4,p.text()]:(f&&(0,o.safeCall)(c,"fail",p),n(),[2]);case 2:return(h=v.sent())&&p.ok?(y=s.Parse(h),(0,o.isArray)(y)?(_=y,e.forEach((function(t,e){return t.processResponsePayload(_[e])})),l&&(0,o.safeCall)(c,"done",p,_),i(),[2,_]):(e.forEach((function(t){return t.processResponsePayload(h)})),l&&(0,o.safeCall)(c,"done",p,h),i(),[2,h])):(d=s.SafeParse(h),f&&(0,o.safeCall)(c,"fail",p,d,p.status,p.statusText),n(d,p.status,p.statusText),[2])}}))}))},t}();e.SharePointBatch=f},"./utils.ts":
/*!******************!*\
  !*** ./utils.ts ***!
  \******************/function(t,e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.safeCall=e.createGUID=e.toParams=e.extend=e.isString=e.isObject=e.isArray=void 0;var r=n(/*! tslib */"../node_modules/tslib/tslib.es6.js");e.isArray=function(t){return Array.isArray(t)};e.isObject=function(t,n){return void 0===n&&(n=!1),t&&"object"==typeof t&&(!n||!(0,e.isArray)(t))};e.isString=function(t){return"string"==typeof t};e.extend=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return Object.assign.apply(Object,r.__spreadArray([t],r.__read(e),!1))};e.toParams=function(t){if(null==t)return"";var n=function(t,r){if((0,e.isArray)(t))return t.map((function(t,e){return"".concat(r||"a","[").concat(e,"]=").concat(n(t))})).join("&");if((0,e.isObject)(t)){var o=[];for(var a in t)if(t.hasOwnProperty(a)){var i=t[a];Array.isArray(i)?o.push(n(t[a],a)):o.push("".concat(a,"=").concat(n(t[a])))}return o.join("&")}var u="".concat(t);try{return encodeURIComponent(u)}catch(s){}return u},r=n(t);return r.length?"".concat("?").concat(r):""};e.createGUID=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))};e.safeCall=function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var a=t[e];"function"==typeof a&&a.call.apply(a,r.__spreadArray([null,t],r.__read(n),!1))}},"../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/function(t,e,n){n.r(e),n.d(e,{__assign:function(){return a},__asyncDelegator:function(){return x},__asyncGenerator:function(){return w},__asyncValues:function(){return S},__await:function(){return g},__awaiter:function(){return l},__classPrivateFieldGet:function(){return O},__classPrivateFieldIn:function(){return R},__classPrivateFieldSet:function(){return T},__createBinding:function(){return p},__decorate:function(){return u},__exportStar:function(){return h},__extends:function(){return o},__generator:function(){return f},__importDefault:function(){return E},__importStar:function(){return j},__makeTemplateObject:function(){return m},__metadata:function(){return c},__param:function(){return s},__read:function(){return y},__rest:function(){return i},__spread:function(){return _},__spreadArray:function(){return b},__spreadArrays:function(){return v},__values:function(){return d}});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var a=function(){return a=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},a.apply(this,arguments)};function i(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(n[r[o]]=t[r[o]])}return n}function u(t,e,n,r){var o,a=arguments.length,i=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(i=(a<3?o(i):a>3?o(e,n,i):o(e,n))||i);return a>3&&i&&Object.defineProperty(e,n,i),i}function s(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{s(r.next(t))}catch(e){a(e)}}function u(t){try{s(r["throw"](t))}catch(e){a(e)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,u)}s((r=r.apply(t,e||[])).next())}))}function f(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),"throw":u(1),"return":u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r["return"]:a[0]?r["throw"]||((o=r["return"])&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(u){a=[6,u],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}var p=Object.create?function(t,e,n,r){r===undefined&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){r===undefined&&(r=n),t[r]=e[n]};function h(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||p(e,t,n)}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=a["return"])&&n.call(a)}finally{if(o)throw o.error}}return i}function _(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function v(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var a=arguments[e],i=0,u=a.length;i<u;i++,o++)r[o]=a[i];return r}function b(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function w(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){a.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=o[t](e)).value instanceof g?Promise.resolve(n.value.v).then(s,c):l(a[0][2],n)}catch(r){l(a[0][3],r)}var n}function s(t){u("next",t)}function c(t){u("throw",t)}function l(t,e){t(e),a.shift(),a.length&&u(a[0][0],a[0][1])}}function x(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,o){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:o?o(e):e}:o}}function S(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,o,(e=t[n](e)).done,e.value)}))}}}function m(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var P=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t["default"]=e};function j(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&p(e,t,n);return P(e,t),e}function E(t){return t&&t.__esModule?t:{"default":t}}function O(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}function T(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n}function R(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}}},e={};function n(r){var o=e[r];if(o!==undefined)return o.exports;var a=e[r]={exports:{}};return t[r](a,a.exports,n),a.exports}n.d=function(t,e){for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};!function(){var t=r;
/*!******************!*\
  !*** ./index.ts ***!
  \******************/Object.defineProperty(t,"__esModule",{value:!0});var e=n(/*! ./sharepoint */"./sharepoint.ts");!function(t,n){n.Changeset=e.Changeset,t.SharePointBatch=n}(window,e.SharePointBatch)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUgsTUNyUHBFTyxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLEdBQUlDLElBQWlCbEQsVUFDcEIsT0FBT2tELEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLElBT1YsT0FIQUUsRUFBb0JKLEdBQVVHLEVBQVFBLEVBQU9ELFFBQVNILEdBRy9DSSxFQUFPRCxRQ3BCZkgsRUFBb0JqSCxFQUFJLFNBQVNvSCxFQUFTRyxHQUN6QyxJQUFJLElBQUlsTyxLQUFPa08sRUFDWE4sRUFBb0IvSCxFQUFFcUksRUFBWWxPLEtBQVM0TixFQUFvQi9ILEVBQUVrSSxFQUFTL04sSUFDNUV5RixPQUFPOEMsZUFBZXdGLEVBQVMvTixFQUFLLENBQUVnTCxZQUFZLEVBQU1DLElBQUtpRCxFQUFXbE8sTUNKM0U0TixFQUFvQi9ILEVBQUksU0FBU3NJLEVBQUszSCxHQUFRLE9BQU9mLE9BQU9zQixVQUFVZCxlQUFlUSxLQUFLMEgsRUFBSzNILElDQy9Gb0gsRUFBb0J4SCxFQUFJLFNBQVMySCxHQUNYLG9CQUFYMUQsUUFBMEJBLE9BQU8rRCxhQUMxQzNJLE9BQU84QyxlQUFld0YsRUFBUzFELE9BQU8rRCxZQUFhLENBQUUxTSxNQUFPLFdBRTdEK0QsT0FBTzhDLGVBQWV3RixFQUFTLGFBQWMsQ0FBRXJNLE9BQU8sSzs7O3VFQ0x2RCwrQ0FFQSxTQUFFeUIsRUFBYWlDLEdBQ1hBLEVBQWdCaEQsVUFBWSxFQUFBQSxVQUM1QmUsRUFBT2lDLGdCQUFrQkEsRUFGN0IsQ0FHR2pDLE9BQVEsRUFBQWlDLGlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9zaGFyZXBvaW50LnRzIiwid2VicGFjazovLy8uL3V0aWxzLnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RPcHRpb25zLCBSZXF1ZXN0UmVzcG9uc2UgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgc2FmZUNhbGwgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBSZXF1ZXN0ID0gYXN5bmMgKG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTxSZXF1ZXN0UmVzcG9uc2U+ID0+IHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlO1xyXG4gICAgICAgIHNhZmVDYWxsKG9wdGlvbnMsICdiZWZvcmUnLCByZXNwb25zZSk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gob3B0aW9ucy51cmwsIG9wdGlvbnMgYXMgbmV2ZXIpO1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgIHNhZmVDYWxsKG9wdGlvbnMsICdkb25lJywgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2FmZUNhbGwob3B0aW9ucywgJ2ZhaWwnLCByZXNwb25zZSwgcmVzcG9uc2U/LnN0YXR1cywgcmVzcG9uc2U/LnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXg6IGFueSkge1xyXG4gICAgICAgICAgICBzYWZlQ2FsbChvcHRpb25zLCAnZmFpbCcsIHJlc3BvbnNlLCBleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzYWZlQ2FsbChvcHRpb25zLCAnZmluYWxseScsIHJlc3BvbnNlKTtcclxuICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmVxdWVzdEpzb24gPSBhc3luYyAob3B0aW9uczogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPGFueSB8IHVuZGVmaW5lZD4gPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBSZXF1ZXN0KG9wdGlvbnMpO1xyXG4gICAgaWYgKCFyZXNwb25zZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICB9IGNhdGNoIChleCkge1xyXG4gICAgfVxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZXF1ZXN0TWV0aG9kcywgUmVxdWVzdE9wdGlvbnMsIFNoYXJlUG9pbnRPcHRpb25zLCBCYXRjaEpvYk9wdGlvbnMsIEJhdGNoSm9iSGVhZGVyLCBTaGFyZVBvaW50QmF0Y2hSZXNwb25zZSwgUmVzcG9uc2VQYXJzZXJQYXlsb2FkIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IGlzQXJyYXksIGlzT2JqZWN0LCBpc1N0cmluZywgZXh0ZW5kLCB0b1BhcmFtcywgY3JlYXRlR1VJRCwgc2FmZUNhbGwgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgUmVxdWVzdCwgUmVxdWVzdEpzb24gfSBmcm9tICcuL3JlcXVlc3QnO1xyXG5cclxuY29uc3QgRmFsbGJhY2tCYXRjaEpvYk9wdGlvbnM6IEJhdGNoSm9iT3B0aW9ucyA9IHtcclxuICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICB1cmw6ICcnLFxyXG59O1xyXG5cclxuY29uc3QgRmFsbGJhY2tSZXF1ZXN0T3B0aW9uczogUmVxdWVzdE9wdGlvbnMgPSB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIHVybDogJycsXHJcbiAgICBoZWFkZXJzOiB7fSxcclxufTtcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuY2xhc3MgUmVzcG9uc2VQYXJzZXIge1xyXG5cclxuICAgIHN0YXRpYyBMZXZlbCA9IHtcclxuICAgICAgICBVTktOT1dOOiAwLFxyXG4gICAgICAgIEhFQURFUlM6IDEsXHJcbiAgICAgICAgUkVRVUVTVDogMixcclxuICAgICAgICBSRVFVRVNUX0hFQURFUlM6IDMsXHJcbiAgICAgICAgUkVRVUVTVF9CT0RZOiA0LFxyXG4gICAgICAgIEVPRjogNSxcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIExpbmVTZXBhcmF0b3IgPSAvXFxyXFxuLztcclxuICAgIHN0YXRpYyBIZWFkZXJLVlNlcGFyYXRvciA9IC86LztcclxuICAgIHN0YXRpYyBIZWFkZXJLVlNlcGFyYXRvckNoYXIgPSAnOic7XHJcbiAgICBzdGF0aWMgQmF0Y2hSZXNwb25zZTEgPSAvXi0tYmF0Y2hyZXNwb25zZV8uKy0tJC9pO1xyXG4gICAgc3RhdGljIEJhdGNoUmVzcG9uc2UyID0gL14tLWJhdGNocmVzcG9uc2VfLiskL2k7XHJcbiAgICBzdGF0aWMgQmF0Y2hSZXNwb25zZTMgPSAvXkhUVFBcXC8xXFwuMVxccysoXFxkKylcXHMrKC4rKSQvaTtcclxuXHJcbiAgICBzdGF0aWMgUGFyc2UocmF3OiBzdHJpbmcpOiBSZXNwb25zZVBhcnNlclBheWxvYWRbXSB8IGFueSB7XHJcblxyXG4gICAgICAgIGlmICghaXNTdHJpbmcocmF3KSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyYXcpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGV4OiBhbnkpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcnNlTGV2ZWxzID0gUmVzcG9uc2VQYXJzZXIuTGV2ZWw7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSByYXcuc3BsaXQoUmVzcG9uc2VQYXJzZXIuTGluZVNlcGFyYXRvcik7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0czogUmVzcG9uc2VQYXJzZXJQYXlsb2FkW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGV0IHRlbXA6IFJlc3BvbnNlUGFyc2VyUGF5bG9hZCB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGxldCBjd286IFJlc3BvbnNlUGFyc2VyUGF5bG9hZCB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGxldCBsZXZlbCA9IHBhcnNlTGV2ZWxzLlVOS05PV047XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKFJlc3BvbnNlUGFyc2VyLkJhdGNoUmVzcG9uc2UxLnRlc3QobGluZSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXAuZGF0YSA9IHRoaXMuUGFyc2UodGVtcC5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godGVtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBwYXJzZUxldmVscy5FT0Y7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUmVzcG9uc2VQYXJzZXIuQmF0Y2hSZXNwb25zZTIudGVzdChsaW5lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5kYXRhID0gdGhpcy5QYXJzZSh0ZW1wLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0ZW1wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0ZW1wID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGh0dHA6IHsgc3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGN3byA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICBsZXZlbCA9IHBhcnNlTGV2ZWxzLkhFQURFUlM7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxldmVsID09PSBwYXJzZUxldmVscy5SRVFVRVNUX0JPRFkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3dvKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjd28uZGF0YSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjd28uZGF0YSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjd28uZGF0YSArPSBsaW5lO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUmVzcG9uc2VQYXJzZXIuQmF0Y2hSZXNwb25zZTMudGVzdChsaW5lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gcGFyc2VMZXZlbHMuUkVRVUVTVCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3dvKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBodHRwID0gbGluZS5tYXRjaChSZXNwb25zZVBhcnNlci5CYXRjaFJlc3BvbnNlMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN3by5odHRwLnN0YXR1cyA9IGh0dHAgJiYgcGFyc2VJbnQoaHR0cFsxXSwgMTApIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN3by5odHRwLnN0YXR1c1RleHQgPSBodHRwICYmIGh0dHBbMl0gfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsID0gcGFyc2VMZXZlbHMuUkVRVUVTVF9IRUFERVJTO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvXi4rOlxccyouKyQvaS50ZXN0KGxpbmUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID09PSBwYXJzZUxldmVscy5IRUFERVJTIHx8IGxldmVsID09PSBwYXJzZUxldmVscy5SRVFVRVNUX0hFQURFUlMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnNwbGl0KFJlc3BvbnNlUGFyc2VyLkhlYWRlcktWU2VwYXJhdG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYXJ0cy5zaGlmdCgpPy50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICYmIGN3bylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN3by5oZWFkZXJzW2tleV0gPSBwYXJ0cy5qb2luKFJlc3BvbnNlUGFyc2VyLkhlYWRlcktWU2VwYXJhdG9yQ2hhcikudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICgvXltcXHNcXHJcXG5dKiQvaS50ZXN0KGxpbmUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChsZXZlbCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHBhcnNlTGV2ZWxzLkhFQURFUlM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsID0gcGFyc2VMZXZlbHMuUkVRVUVTVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgcGFyc2VMZXZlbHMuUkVRVUVTVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSBwYXJzZUxldmVscy5SRVFVRVNUX0hFQURFUlM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHBhcnNlTGV2ZWxzLlJFUVVFU1RfSEVBREVSUzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSBwYXJzZUxldmVscy5SRVFVRVNUX0JPRFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFNhZmVQYXJzZShyYXc6IGFueSk6IFJlc3BvbnNlUGFyc2VyUGF5bG9hZCB8IGFueSB7XHJcblxyXG4gICAgICAgIGlmICghaXNTdHJpbmcocmF3KSlcclxuICAgICAgICAgICAgcmV0dXJuIHJhdztcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KTtcclxuICAgICAgICB9IGNhdGNoIChleDogYW55KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZG9tOiBET01QYXJzZXIgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRvbSA9IG5ldyBET01QYXJzZXIoKTtcclxuICAgICAgICB9IGNhdGNoIChleDogYW55KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWRvbSlcclxuICAgICAgICAgICAgcmV0dXJuIHJhdztcclxuXHJcbiAgICAgICAgbGV0IGRvYzogRG9jdW1lbnQgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRvYyA9IGRvbS5wYXJzZUZyb21TdHJpbmcocmF3LCAndGV4dC94bWwnKTtcclxuICAgICAgICB9IGNhdGNoIChleDogYW55KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWRvYylcclxuICAgICAgICAgICAgcmV0dXJuIHJhdztcclxuXHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBkb2MucXVlcnlTZWxlY3RvcignZXJyb3InKTtcclxuXHJcbiAgICAgICAgaWYgKCFlcnJvcilcclxuICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuXHJcbiAgICAgICAgY29uc3QgY29kZSA9IGVycm9yLnF1ZXJ5U2VsZWN0b3IoJ2NvZGUnKTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3IucXVlcnlTZWxlY3RvcignbWVzc2FnZScpO1xyXG5cclxuICAgICAgICBjb25zdCBjb2RlVGV4dCA9IGNvZGUgPyBjb2RlLmlubmVySFRNTCA6IDA7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZVRleHQgPSBtZXNzYWdlID8gbWVzc2FnZS5pbm5lckhUTUwgOiAnJztcclxuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBgJHtjb2RlVGV4dH06ICR7bWVzc2FnZVRleHR9YDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVycm9yVGV4dDtcclxuXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogSW5kaXZpZHVhbCBxdWVyaWVzIGFyZSBidW5kbGVkIGludG8gXCJjaGFuZ2VzZXRcIiBlbnRyaWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENoYW5nZXNldCB7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX29wdGlvbnM6IEJhdGNoSm9iT3B0aW9ucztcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfcmVzcG9uc2VQYXlsb2FkOiBSZXNwb25zZVBhcnNlclBheWxvYWQgfCBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogQmF0Y2hKb2JPcHRpb25zKSB7XHJcbiAgICAgICAgLy9AdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IGV4dGVuZCh7fSwgRmFsbGJhY2tCYXRjaEpvYk9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYEdFVGAsIGBQT1NUYCwgYC4uLmAgbWV0aG9kLlxyXG4gICAgICogQHJldHVybnMgUmVxdWVzdCBtZXRob2QuXHJcbiAgICAgKi9cclxuICAgIGdldE1ldGhvZCgpOiBSZXF1ZXN0TWV0aG9kcyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMubWV0aG9kO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZnVsbCByZXF1ZXN0IFVSTC5cclxuICAgICAqIEByZXR1cm5zIFJlcXVlc3QgVVJMIHdpdGggYW55IG9wdGlvbmFsIHBhcmFtcy5cclxuICAgICAqL1xyXG4gICAgZ2V0VXJsKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLl9vcHRpb25zLnVybH0ke3RvUGFyYW1zKHRoaXMuX29wdGlvbnMucGFyYW1zKX1gO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaGVhZGVycyBvYmplY3QgZm9yIHRoZSByZXF1ZXN0LlxyXG4gICAgICogQHJldHVybnMgUmVxdWVzdCBoZWFkZXIgYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIGdldEhlYWRlcnMoKTogQmF0Y2hKb2JIZWFkZXJbXSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLl9vcHRpb25zLmhlYWRlcnM7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0czogQmF0Y2hKb2JIZWFkZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoaXNPYmplY3QoaGVhZGVycykpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgaW4gaGVhZGVycykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHsga2V5OiBoZWFkZXIsIHZhbHVlOiBoZWFkZXJzW2hlYWRlcl0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXRQYXlsb2FkKCk6IEJvZHlJbml0IHwgbnVsbCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuYm9keTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHBheWxvYWQgZnJvbSB0aGUgc2VydmVyIG9uY2UgdGhlIGNoYW5nZXNldCBpcyBxdWVyaWVkIGFuZCBwcm9jZXNzZWQuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgcmF3IGRhdGEgdGhlIHNlcnZlciByZXNwb25kZWQgd2l0aCBmcm9tIHRoZSByZXF1ZXN0LlxyXG4gICAgICovXHJcbiAgICBnZXRSZXNwb25zZVBheWxvYWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlUGF5bG9hZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm9jZXNzUmVzcG9uc2VQYXlsb2FkKHBheWxvYWQ6IFJlc3BvbnNlUGFyc2VyUGF5bG9hZCB8IHN0cmluZyB8IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICB0aGlzLl9yZXNwb25zZVBheWxvYWQgPSBwYXlsb2FkO1xyXG5cclxuICAgICAgICBjb25zdCBpc1BheWxvYWQgPSBpc09iamVjdChwYXlsb2FkKTtcclxuICAgICAgICBjb25zdCBzYWZlUGF5bG9hZCA9IGlzUGF5bG9hZCA/IHBheWxvYWQgYXMgUmVzcG9uc2VQYXJzZXJQYXlsb2FkIDogbnVsbDtcclxuICAgICAgICBjb25zdCBzdGF0dXNEaWdpdCA9IHNhZmVQYXlsb2FkID8gc2FmZVBheWxvYWQuaHR0cC5zdGF0dXMgLyAxMDAgfCAwIDogMDtcclxuXHJcbiAgICAgICAgaWYgKHNhZmVQYXlsb2FkKVxyXG4gICAgICAgICAgICBzYWZlUGF5bG9hZC5jaGFuZ2VzZXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoc3RhdHVzRGlnaXQgIT09IDIpXHJcbiAgICAgICAgICAgIHNhZmVDYWxsKHRoaXMuX29wdGlvbnMsICdmYWlsJywgdGhpcywgcGF5bG9hZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzYWZlQ2FsbCh0aGlzLl9vcHRpb25zLCAnZG9uZScsIHRoaXMsIHBheWxvYWQpO1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCdW5kbGVzIG9mIENoYW5nZXNldCBvYmplY3RzIGFyZSBsdW1wZWQgaW50byBcImJhdGNoIGpvYlwiIGVudHJpZXMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY2xhc3MgQmF0Y2hKb2Ige1xyXG5cclxuICAgIHN0YXRpYyBOdW1NYXhDaGFuZ2VzZXRzID0gMTAwO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIF9vcHRpb25zOiBCYXRjaEpvYk9wdGlvbnM7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2NoYW5nZXNldHM6IENoYW5nZXNldFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJhdGNoSm9iT3B0aW9ucykge1xyXG4gICAgICAgIC8vQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBleHRlbmQoe30sIEZhbGxiYWNrQmF0Y2hKb2JPcHRpb25zLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9jaGFuZ2VzZXRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpZ25vcmUgKi9cclxuICAgIGlzQ2hhbmdlc2V0c0Z1bGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYW5nZXNldHMubGVuZ3RoID49IEJhdGNoSm9iLk51bU1heENoYW5nZXNldHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmQgYSBjaGFuZ2VzZXQgdG8gdGhlIGNoYW5nZXNldCBxdWV1ZS5cclxuICAgICAqIEBwYXJhbSBjaGFuZ2VzZXQgQW4gb2JqZWN0IG9mIGBDaGFuZ2VzZXRgLlxyXG4gICAgICogQHJldHVybnMgU3VjY2Vzc2Z1bGwgYWRkaXRpb25zIHJldHVybiB0aGUgYGluZGV4YCBpbiB0aGUgcXVldWUgb3RoZXJ3aXNlIGAtMWAuXHJcbiAgICAgKi9cclxuICAgIGFkZENoYW5nZXNldChjaGFuZ2VzZXQ6IENoYW5nZXNldCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXNldCBpbnN0YW5jZW9mIENoYW5nZXNldCkge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlc2V0Ll9vcHRpb25zLnVybFswXSA9PT0gJy8nKVxyXG4gICAgICAgICAgICAgICAgY2hhbmdlc2V0Ll9vcHRpb25zLnVybCA9IGAke3RoaXMuX29wdGlvbnMudXJsfSR7Y2hhbmdlc2V0Ll9vcHRpb25zLnVybH1gO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhbmdlc2V0cy5wdXNoKGNoYW5nZXNldCkgLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0UGF5bG9hZChndWlkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0gW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hhbmdlc2V0IG9mIHRoaXMuX2NoYW5nZXNldHMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGNoYW5nZXNldC5nZXRNZXRob2QoKTtcclxuICAgICAgICAgICAgY29uc3QgYm91bmRhcnkgPSBtZXRob2QgPT09ICdHRVQnID8gbnVsbCA6IGBjaGFuZ2VzZXRfJHtjcmVhdGVHVUlEKCl9YDtcclxuXHJcbiAgICAgICAgICAgIGRhdGEucHVzaChgLS1iYXRjaF8ke2d1aWR9YCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYm91bmRhcnkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChgQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PVwiJHtib3VuZGFyeX1cImApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKCdDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2h0dHAnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0YS5wdXNoKCdDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiaW5hcnknKTtcclxuICAgICAgICAgICAgZGF0YS5wdXNoKCcnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGAke21ldGhvZH0gJHtjaGFuZ2VzZXQuZ2V0VXJsKCl9IEhUVFAvMS4xYCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goJ0FjY2VwdDogYXBwbGljYXRpb24vanNvbjtvZGF0YT12ZXJib3NlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgY2hhbmdlc2V0LmdldEhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChgJHtoZWFkZXIua2V5fTogJHtoZWFkZXIudmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKCcnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGAtLSR7Ym91bmRhcnl9YCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vaHR0cCcpO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKCdDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiaW5hcnknKTtcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGAke21ldGhvZH0gJHtjaGFuZ2VzZXQuZ2V0VXJsKCl9IEhUVFAvMS4xYCk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goJ0FjY2VwdDogYXBwbGljYXRpb24vanNvbjtvZGF0YT12ZXJib3NlJyk7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtvZGF0YT12ZXJib3NlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgY2hhbmdlc2V0LmdldEhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChgJHtoZWFkZXIua2V5fTogJHtoZWFkZXIudmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VzZXRQYXlsb2FkID0gY2hhbmdlc2V0LmdldFBheWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlc2V0UGF5bG9hZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goSlNPTi5zdHJpbmdpZnkoY2hhbmdlc2V0UGF5bG9hZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJvdW5kYXJ5KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goYC0tJHtib3VuZGFyeX0tLWApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGEuam9pbignXFxyXFxuJyk7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBsaWJyYXJ5IGVudHJ5IHBvaW50IGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNoYXJlUG9pbnRCYXRjaCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBgd2luZG93YCBwcm9wZXJ0aWVzIGBfc3BQYWdlQ29udGV4dEluZm9gIGFuZCBgR2V0UmVxdWVzdERpZ2VzdGAuXHJcbiAgICAgKiBAcmV0dXJucyBJZiBwb3NzaWJsZSBpdCByZXR1cm5zIGEgYFNoYXJlUG9pbnRPcHRpb25zYCBvYmplY3Qgb3RoZXJ3aXNlIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBHZXRTaGFyZVBvaW50T3B0aW9ucygpOiBTaGFyZVBvaW50T3B0aW9ucyB8IHVuZGVmaW5lZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpbjogYW55ID0gd2luZG93O1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQ6IGFueSA9IHdpbi5fc3BQYWdlQ29udGV4dEluZm87XHJcbiAgICAgICAgY29uc3QgZ2V0RGlnZXN0OiBhbnkgPSB3aW4uR2V0UmVxdWVzdERpZ2VzdDtcclxuXHJcbiAgICAgICAgaWYgKCFpc09iamVjdChjb250ZXh0KSB8fCB0eXBlb2YgZ2V0RGlnZXN0ICE9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCB1cmw6IGFueSA9IGNvbnRleHQud2ViQWJzb2x1dGVVcmw7XHJcbiAgICAgICAgbGV0IGRpZ2VzdDogYW55O1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBkaWdlc3QgPSBnZXREaWdlc3QoKTtcclxuICAgICAgICB9IGNhdGNoIChleDogYW55KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzU3RyaW5nKHVybCkpXHJcbiAgICAgICAgICAgIHVybCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAoIWlzU3RyaW5nKGRpZ2VzdCkpXHJcbiAgICAgICAgICAgIGRpZ2VzdCA9ICcnO1xyXG5cclxuICAgICAgICByZXR1cm4geyB1cmwsIGRpZ2VzdCB9O1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBfb3B0aW9uczogU2hhcmVQb2ludE9wdGlvbnM7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2pvYnM6IEJhdGNoSm9iW107XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgX2pvYjogQmF0Y2hKb2IgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogU2hhcmVQb2ludE9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLl9qb2JzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYXBwZW5kTmV3Sm9iKG9wdGlvbnM/OiBCYXRjaEpvYk9wdGlvbnMpOiBCYXRjaEpvYiB7XHJcblxyXG4gICAgICAgIC8vQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIGNvbnN0IGZhbGxiYWNrOiBCYXRjaEpvYk9wdGlvbnMgPSBleHRlbmQoe30sIEZhbGxiYWNrQmF0Y2hKb2JPcHRpb25zLCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgdGhpcy5fam9iID0gbmV3IEJhdGNoSm9iKGZhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLl9qb2JzLnB1c2godGhpcy5fam9iKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2pvYjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0QWN0aXZlSm9iKCk6IEJhdGNoSm9iIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2pvYilcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kTmV3Sm9iKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2pvYjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZCBhIGNoYW5nZXNldCB0byB0aGUgYmF0Y2ggcXVldWUuXHJcbiAgICAgKiBAcGFyYW0gY2hhbmdlc2V0IE9iamVjdCBpbnN0YW5jZSBvZiBgQ2hhbmdlc2V0YC5cclxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgY2hhbmdlc2V0IHdhcyBhZGRlZCBvdGhlcndpc2UgYGZhbHNlYC5cclxuICAgICAqL1xyXG4gICAgYWRkQ2hhbmdlc2V0KGNoYW5nZXNldDogQ2hhbmdlc2V0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGpvYiA9IHRoaXMuZ2V0QWN0aXZlSm9iKCk7XHJcbiAgICAgICAgaWYgKGpvYi5pc0NoYW5nZXNldHNGdWxsKCkpXHJcbiAgICAgICAgICAgIGpvYiA9IHRoaXMuYXBwZW5kTmV3Sm9iKCk7XHJcbiAgICAgICAgcmV0dXJuIGpvYi5hZGRDaGFuZ2VzZXQoY2hhbmdlc2V0KSA+IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldFBheWxvYWQoZ3VpZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fam9icy5tYXAoam9iID0+IGpvYi5nZXRQYXlsb2FkKGd1aWQpKS5qb2luKCdcXHJcXG4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXRTZW5kT3B0aW9ucyhvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBSZXF1ZXN0T3B0aW9ucyB7XHJcblxyXG4gICAgICAgIC8vQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIGNvbnN0IGZhbGxiYWNrOiBSZXF1ZXN0T3B0aW9ucyA9IGV4dGVuZCh7fSwgRmFsbGJhY2tSZXF1ZXN0T3B0aW9ucywgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGd1aWQgPSBjcmVhdGVHVUlEKCk7XHJcblxyXG4gICAgICAgIGZhbGxiYWNrLnVybCA9IGAke3RoaXMuX29wdGlvbnMudXJsfS9fYXBpLyRiYXRjaGA7XHJcblxyXG4gICAgICAgIGlmIChmYWxsYmFjay5oZWFkZXJzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChmYWxsYmFjay5oZWFkZXJzLCB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogYG11bHRpcGFydC9taXhlZDsgYm91bmRhcnk9XCJiYXRjaF8ke2d1aWR9XCJgLFxyXG4gICAgICAgICAgICAgICAgJ1gtUmVxdWVzdERpZ2VzdCc6IHRoaXMuX29wdGlvbnMuZGlnZXN0LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZhbGxiYWNrLmJvZHkgPSBgJHt0aGlzLmdldFBheWxvYWQoZ3VpZCl9XFxyXFxuLS1iYXRjaF8ke2d1aWR9LS1gO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgYmF0Y2ggcXVldWUuIFN1cHBvcnRzIGBhd2FpdGAgYnV0IHRoZSBvdXRwdXQgaXMgbm90aGluZyBpZiBpdCBmYWlscywgb3RoZXJ3aXNlIGl0IGNvbnRhaW5zIHRoZSBzdWNjZXNzZnVsbCBkYXRhIGZyb20gdGhlIHJlcXVlc3QuXHJcbiAgICAgKiBcclxuICAgICAqIFlvdSBjYW4gYXNzaWduIHRoZSBgZG9uZWAgYW5kIGBmYWlsYCB0byB0aGUgb3B0aW9uYWwgYXJndW1lbnQgYG9wdGlvbnNgIGluIG9yZGVyIHRvIGRldGVjdCB0aGUgb3V0Y29tZSBvZiB0aGUgcmVxdWVzdC5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIGBSZXF1ZXN0T3B0aW9uc2Agb2JqZWN0LlxyXG4gICAgICogQHJldHVybnMgYFByb21pc2VgIHRoYXQgZWl0aGVyIHJldHVybnMgYSBgU2hhcmVQb2ludEJhdGNoUmVzcG9uc2VgIHdoZW4gc3VjY2Vzc2Z1bGwgb3RoZXJ3aXNlIG5vdGhpbmcuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNlbmQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTxTaGFyZVBvaW50QmF0Y2hSZXNwb25zZT4ge1xyXG5cclxuICAgICAgICBjb25zdCBjaGFuZ2VzZXRzOiBDaGFuZ2VzZXRbXSA9IHRoaXMuX2pvYnMucmVkdWNlKChwOiBDaGFuZ2VzZXRbXSwgYzogQmF0Y2hKb2IpID0+IHsgcC5wdXNoKC4uLmMuX2NoYW5nZXNldHMpOyByZXR1cm4gcDsgfSwgW10pO1xyXG4gICAgICAgIGNoYW5nZXNldHMuZm9yRWFjaChjaGFuZ2VzZXQgPT4gc2FmZUNhbGwoY2hhbmdlc2V0Ll9vcHRpb25zLCAnYmVmb3JlJywgY2hhbmdlc2V0KSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNhZmVFcnJvciA9ICguLi5hcmdzOiBhbnkpOiB1bmRlZmluZWQgPT4ge1xyXG4gICAgICAgICAgICBjaGFuZ2VzZXRzLmZvckVhY2goY2hhbmdlc2V0ID0+IHNhZmVDYWxsKGNoYW5nZXNldC5fb3B0aW9ucywgJ2ZhaWwnLCBjaGFuZ2VzZXQsIC4uLmFyZ3MpKTtcclxuICAgICAgICAgICAgY2hhbmdlc2V0cy5mb3JFYWNoKGNoYW5nZXNldCA9PiBzYWZlQ2FsbChjaGFuZ2VzZXQuX29wdGlvbnMsICdmaW5hbGx5JywgY2hhbmdlc2V0KSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzYWZlRmluYWxseSA9ICgpID0+IHtcclxuICAgICAgICAgICAgY2hhbmdlc2V0cy5mb3JFYWNoKGNoYW5nZXNldCA9PiBzYWZlQ2FsbChjaGFuZ2VzZXQuX29wdGlvbnMsICdmaW5hbGx5JywgY2hhbmdlc2V0KSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZmFsbGJhY2s6IFJlcXVlc3RPcHRpb25zID0gdGhpcy5nZXRTZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy9AdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgY29uc3QgYmFja3VwOiBSZXF1ZXN0T3B0aW9ucyA9IGV4dGVuZCh7fSwgZmFsbGJhY2spO1xyXG5cclxuICAgICAgICBsZXQgZGVsYXllZERvbmUgPSBmYWxzZTtcclxuICAgICAgICBsZXQgZGVsYXllZEZhaWwgPSBmYWxzZTtcclxuICAgICAgICBmYWxsYmFjay5kb25lID0gKCkgPT4gZGVsYXllZERvbmUgPSB0cnVlO1xyXG4gICAgICAgIGZhbGxiYWNrLmZhaWwgPSAoKSA9PiBkZWxheWVkRmFpbCA9IHRydWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUmVxdWVzdChmYWxsYmFjayk7XHJcblxyXG4gICAgICAgIGlmICghcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYgKGRlbGF5ZWRGYWlsKVxyXG4gICAgICAgICAgICAgICAgc2FmZUNhbGwoYmFja3VwLCAnZmFpbCcsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgc2FmZUVycm9yKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcblxyXG4gICAgICAgIGlmICghcGF5bG9hZCB8fCAhcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgY29uc3Qgc2FmZVBheWxvYWQgPSBSZXNwb25zZVBhcnNlci5TYWZlUGFyc2UocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheWVkRmFpbClcclxuICAgICAgICAgICAgICAgIHNhZmVDYWxsKGJhY2t1cCwgJ2ZhaWwnLCByZXNwb25zZSwgc2FmZVBheWxvYWQsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgIHNhZmVFcnJvcihzYWZlUGF5bG9hZCwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcGFyc2VkID0gUmVzcG9uc2VQYXJzZXIuUGFyc2UocGF5bG9hZCk7XHJcblxyXG4gICAgICAgIGlmICghaXNBcnJheShwYXJzZWQpKSB7XHJcbiAgICAgICAgICAgIGNoYW5nZXNldHMuZm9yRWFjaChjaGFuZ2VzZXQgPT4gY2hhbmdlc2V0LnByb2Nlc3NSZXNwb25zZVBheWxvYWQocGF5bG9hZCkpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXllZERvbmUpXHJcbiAgICAgICAgICAgICAgICBzYWZlQ2FsbChiYWNrdXAsICdkb25lJywgcmVzcG9uc2UsIHBheWxvYWQpO1xyXG4gICAgICAgICAgICBzYWZlRmluYWxseSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYW5nZXNldFBheWxvYWRzID0gcGFyc2VkIGFzIFJlc3BvbnNlUGFyc2VyUGF5bG9hZFtdO1xyXG4gICAgICAgIGNoYW5nZXNldHMuZm9yRWFjaCgoY2hhbmdlc2V0LCBpbmRleCkgPT4gY2hhbmdlc2V0LnByb2Nlc3NSZXNwb25zZVBheWxvYWQoY2hhbmdlc2V0UGF5bG9hZHNbaW5kZXhdKSk7XHJcbiAgICAgICAgaWYgKGRlbGF5ZWREb25lKVxyXG4gICAgICAgICAgICBzYWZlQ2FsbChiYWNrdXAsICdkb25lJywgcmVzcG9uc2UsIGNoYW5nZXNldFBheWxvYWRzKTtcclxuICAgICAgICBzYWZlRmluYWxseSgpO1xyXG4gICAgICAgIHJldHVybiBjaGFuZ2VzZXRQYXlsb2FkcztcclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IENhbGxiYWNrUHJvcHMsIFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IChvYmplY3Q6IGFueSkgPT4gQXJyYXkuaXNBcnJheShvYmplY3QpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKG9iamVjdDogYW55LCBwbGFpbk9iamVjdDogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiA9PiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgKCFwbGFpbk9iamVjdCB8fCAhaXNBcnJheShvYmplY3QpKTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc1N0cmluZyA9IChvYmplY3Q6IGFueSkgPT4gdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XHJcblxyXG5leHBvcnQgY29uc3QgZXh0ZW5kID0gPFQ+KHRhcmdldDogVCwgLi4uc291cmNlczogVFtdKTogVCA9PiBPYmplY3QuYXNzaWduKHRhcmdldCBhcyBPYmplY3QsIC4uLnNvdXJjZXMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvUGFyYW1zID0gKG9iamVjdDogYW55KTogc3RyaW5nID0+IHtcclxuXHJcbiAgICBpZiAob2JqZWN0ID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG5cclxuICAgIGNvbnN0IGFycmF5UHJlZml4ID0gJ2EnO1xyXG4gICAgY29uc3QgcGFyYW1QcmVmaXggPSAnPyc7XHJcbiAgICBjb25zdCBwYXJhbURlbGltID0gJyYnO1xyXG5cclxuICAgIGNvbnN0IHNlcmlhbGl6ZSA9IChvOiBvYmplY3QsIG4/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG5cclxuICAgICAgICBpZiAoaXNBcnJheShvKSkge1xyXG5cclxuICAgICAgICAgICAgLy9AdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgIHJldHVybiBvLm1hcCgodiwgaykgPT4gYCR7biB8fCBhcnJheVByZWZpeH1bJHtrfV09JHtzZXJpYWxpemUodil9YCkuam9pbihwYXJhbURlbGltKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvKSkge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcDogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgayBpbiBvKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFvLmhhc093blByb3BlcnR5KGspKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBvW2tdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5wdXNoKHNlcmlhbGl6ZShvW2tdLCBrKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHAucHVzaChgJHtrfT0ke3NlcmlhbGl6ZShvW2tdKX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwLmpvaW4ocGFyYW1EZWxpbSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcCA9IGAke299YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChwKTtcclxuICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHA7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSBzZXJpYWxpemUob2JqZWN0KTtcclxuXHJcbiAgICBpZiAoIXBhcmFtcy5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG5cclxuICAgIHJldHVybiBgJHtwYXJhbVByZWZpeH0ke3BhcmFtc31gO1xyXG5cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVHVUlEID0gKCk6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCAoYzogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XHJcbiAgICAgICAgcmV0dXJuIChjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpKS50b1N0cmluZygxNik7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzYWZlQ2FsbCA9IChvcHRpb25zOiBSZXF1ZXN0T3B0aW9ucywgcHJvcDogQ2FsbGJhY2tQcm9wcywgLi4uYXJnczogYW55KSA9PiB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbcHJvcF07XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxyXG4gICAgICAgIHZhbHVlLmNhbGwobnVsbCwgb3B0aW9ucywgLi4uYXJncyk7XHJcbn07XHJcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBDaGFuZ2VzZXQsIFNoYXJlUG9pbnRCYXRjaCB9IGZyb20gJy4vc2hhcmVwb2ludCc7XHJcblxyXG4oKHdpbmRvdzogYW55LCBTaGFyZVBvaW50QmF0Y2g6IGFueSkgPT4ge1xyXG4gICAgU2hhcmVQb2ludEJhdGNoLkNoYW5nZXNldCA9IENoYW5nZXNldDtcclxuICAgIHdpbmRvdy5TaGFyZVBvaW50QmF0Y2ggPSBTaGFyZVBvaW50QmF0Y2g7XHJcbn0pKHdpbmRvdywgU2hhcmVQb2ludEJhdGNoKTtcclxuIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzYWZlQ2FsbCIsInJlc3BvbnNlIiwiZmV0Y2giLCJ1cmwiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJSZXF1ZXN0SnNvbiIsImpzb24iLCJGYWxsYmFja0JhdGNoSm9iT3B0aW9ucyIsIm1ldGhvZCIsIkZhbGxiYWNrUmVxdWVzdE9wdGlvbnMiLCJoZWFkZXJzIiwiUGFyc2UiLCJyYXciLCJpc1N0cmluZyIsIkpTT04iLCJwYXJzZSIsImV4IiwicGFyc2VMZXZlbHMiLCJSZXNwb25zZVBhcnNlciIsIkxldmVsIiwibGluZXMiLCJzcGxpdCIsIkxpbmVTZXBhcmF0b3IiLCJyZXN1bHRzIiwidGVtcCIsImN3byIsImxldmVsIiwiVU5LTk9XTiIsImxpbmUiLCJCYXRjaFJlc3BvbnNlMSIsInRlc3QiLCJkYXRhIiwidGhpcyIsInB1c2giLCJFT0YiLCJCYXRjaFJlc3BvbnNlMiIsImh0dHAiLCJIRUFERVJTIiwiUkVRVUVTVF9CT0RZIiwiQmF0Y2hSZXNwb25zZTMiLCJSRVFVRVNUIiwibWF0Y2giLCJwYXJzZUludCIsIlJFUVVFU1RfSEVBREVSUyIsInBhcnRzIiwiSGVhZGVyS1ZTZXBhcmF0b3IiLCJrZXkiLCJzaGlmdCIsInRyaW0iLCJqb2luIiwiSGVhZGVyS1ZTZXBhcmF0b3JDaGFyIiwiU2FmZVBhcnNlIiwiZG9tIiwiZG9jIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZXJyb3IiLCJxdWVyeVNlbGVjdG9yIiwiY29kZSIsIm1lc3NhZ2UiLCJjb2RlVGV4dCIsImlubmVySFRNTCIsIm1lc3NhZ2VUZXh0IiwiX29wdGlvbnMiLCJleHRlbmQiLCJnZXRNZXRob2QiLCJnZXRVcmwiLCJ0b1BhcmFtcyIsInBhcmFtcyIsImdldEhlYWRlcnMiLCJpc09iamVjdCIsImhlYWRlciIsInZhbHVlIiwiZ2V0UGF5bG9hZCIsImJvZHkiLCJnZXRSZXNwb25zZVBheWxvYWQiLCJfcmVzcG9uc2VQYXlsb2FkIiwicHJvY2Vzc1Jlc3BvbnNlUGF5bG9hZCIsInBheWxvYWQiLCJzYWZlUGF5bG9hZCIsInN0YXR1c0RpZ2l0IiwiY2hhbmdlc2V0IiwiQ2hhbmdlc2V0IiwiX2NoYW5nZXNldHMiLCJpc0NoYW5nZXNldHNGdWxsIiwibGVuZ3RoIiwiQmF0Y2hKb2IiLCJOdW1NYXhDaGFuZ2VzZXRzIiwiYWRkQ2hhbmdlc2V0IiwiZ3VpZCIsImJvdW5kYXJ5IiwiY3JlYXRlR1VJRCIsImNoYW5nZXNldFBheWxvYWQiLCJzdHJpbmdpZnkiLCJfam9icyIsIkdldFNoYXJlUG9pbnRPcHRpb25zIiwid2luIiwid2luZG93IiwiY29udGV4dCIsIl9zcFBhZ2VDb250ZXh0SW5mbyIsImdldERpZ2VzdCIsIkdldFJlcXVlc3REaWdlc3QiLCJkaWdlc3QiLCJ3ZWJBYnNvbHV0ZVVybCIsImFwcGVuZE5ld0pvYiIsImZhbGxiYWNrIiwiX2pvYiIsImdldEFjdGl2ZUpvYiIsImpvYiIsIm1hcCIsImdldFNlbmRPcHRpb25zIiwic2VuZCIsImNoYW5nZXNldHMiLCJyZWR1Y2UiLCJwIiwiYyIsImZvckVhY2giLCJzYWZlRXJyb3IiLCJhcmdzIiwic2FmZUZpbmFsbHkiLCJiYWNrdXAiLCJkZWxheWVkRG9uZSIsImRlbGF5ZWRGYWlsIiwiZG9uZSIsImZhaWwiLCJ0ZXh0IiwicGFyc2VkIiwiaXNBcnJheSIsImNoYW5nZXNldFBheWxvYWRzIiwiaW5kZXgiLCJTaGFyZVBvaW50QmF0Y2giLCJvYmplY3QiLCJBcnJheSIsInBsYWluT2JqZWN0IiwidGFyZ2V0IiwiT2JqZWN0IiwiYXNzaWduIiwic291cmNlcyIsInNlcmlhbGl6ZSIsIm8iLCJuIiwidiIsImsiLCJoYXNPd25Qcm9wZXJ0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJyIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwicHJvcCIsImNhbGwiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInByb3RvdHlwZSIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2Fzc2lnbiIsInQiLCJzIiwiaSIsImFyZ3VtZW50cyIsImFwcGx5IiwiX19yZXN0IiwiZSIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwidGhlbiIsIl9fZ2VuZXJhdG9yIiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvcCIsInBvcCIsIl9fY3JlYXRlQmluZGluZyIsIm0iLCJrMiIsInVuZGVmaW5lZCIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJjb25jYXQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiYSIsImoiLCJqbCIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwibCIsInNsaWNlIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fbWFrZVRlbXBsYXRlT2JqZWN0IiwiY29va2VkIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19pbXBvcnREZWZhdWx0IiwiZGVmYXVsdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsInN0YXRlIiwia2luZCIsImhhcyIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJzZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkSW4iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJvYmoiLCJ0b1N0cmluZ1RhZyJdLCJzb3VyY2VSb290IjoiIn0=